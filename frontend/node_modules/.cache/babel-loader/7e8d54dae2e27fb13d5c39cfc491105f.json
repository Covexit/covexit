{"ast":null,"code":"var ClusterIcon = /*#__PURE__*/function () {\n  function ClusterIcon(cluster, styles) {\n    cluster.getClusterer().extend(ClusterIcon, google.maps.OverlayView);\n    this.cluster = cluster;\n    this.className = this.cluster.getClusterer().getClusterClass();\n    this.styles = styles;\n    this.center = undefined;\n    this.div = null;\n    this.sums = null;\n    this.visible = false;\n    this.boundsChangedListener = null;\n    this.url = '';\n    this.height = 0;\n    this.width = 0;\n    this.anchorText = [0, 0];\n    this.anchorIcon = [0, 0];\n    this.textColor = 'black';\n    this.textSize = 11;\n    this.textDecoration = 'none';\n    this.fontWeight = 'bold';\n    this.fontStyle = 'normal';\n    this.fontFamily = 'Arial,sans-serif';\n    this.backgroundPosition = '0 0'; // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n\n    this.setMap(cluster.getMap()); // Note: this causes onAdd to be called\n  }\n\n  var _proto = ClusterIcon.prototype;\n\n  _proto.onAdd = function onAdd() {\n    var _this = this;\n\n    var cMouseDownInCluster;\n    var cDraggingMapByCluster;\n    this.div = document.createElement('div');\n    this.div.className = this.className;\n\n    if (this.visible) {\n      this.show();\n    } // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n\n\n    this.getPanes().overlayMouseTarget.appendChild(this.div); // Fix for Issue 157\n\n    this.boundsChangedListener = google.maps.event.addListener( // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.getMap(), 'boundschanged', function boundsChanged() {\n      cDraggingMapByCluster = cMouseDownInCluster;\n    });\n    google.maps.event.addDomListener(this.div, 'mousedown', function onMouseDown() {\n      cMouseDownInCluster = true;\n      cDraggingMapByCluster = false;\n    }); // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n\n    google.maps.event.addDomListener(this.div, 'click', // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n    function (event) {\n      cMouseDownInCluster = false;\n\n      if (!cDraggingMapByCluster) {\n        var markerClusterer = _this.cluster.getClusterer();\n        /**\r\n         * This event is fired when a cluster marker is clicked.\r\n         * @name MarkerClusterer#click\r\n         * @param {Cluster} c The cluster that was clicked.\r\n         * @event\r\n         */\n\n\n        google.maps.event.trigger(markerClusterer, 'click', _this.cluster);\n        google.maps.event.trigger(markerClusterer, 'clusterclick', _this.cluster); // deprecated name\n        // The default click handler follows. Disable it by setting\n        // the zoomOnClick property to false.\n\n        if (markerClusterer.getZoomOnClick()) {\n          // Zoom into the cluster.\n          var maxZoom = markerClusterer.getMaxZoom();\n\n          var bounds = _this.cluster.getBounds(); // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n          // @ts-ignore\n\n\n          markerClusterer.getMap().fitBounds(bounds); // There is a fix for Issue 170 here:\n\n          setTimeout(function timeout() {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            // @ts-ignore\n            markerClusterer.getMap().fitBounds(bounds); // Don't zoom beyond the max zoom level\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            // @ts-ignore\n\n            if (maxZoom !== null && markerClusterer.getMap().getZoom() > maxZoom) {\n              // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n              // @ts-ignore\n              markerClusterer.getMap().setZoom(maxZoom + 1);\n            }\n          }, 100);\n        } // Prevent event propagation to the map:\n\n\n        event.cancelBubble = true;\n\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        }\n      }\n    });\n    google.maps.event.addDomListener(this.div, 'mouseover', // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n    function () {\n      /**\r\n       * This event is fired when the mouse moves over a cluster marker.\r\n       * @name MarkerClusterer#mouseover\r\n       * @param {Cluster} c The cluster that the mouse moved over.\r\n       * @event\r\n       */\n      google.maps.event.trigger(_this.cluster.getClusterer(), 'mouseover', _this.cluster);\n    }); // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n\n    google.maps.event.addDomListener(this.div, 'mouseout', // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n    function () {\n      /**\r\n       * This event is fired when the mouse moves out of a cluster marker.\r\n       * @name MarkerClusterer#mouseout\r\n       * @param {Cluster} c The cluster that the mouse moved out of.\r\n       * @event\r\n       */\n      google.maps.event.trigger(_this.cluster.getClusterer(), 'mouseout', _this.cluster);\n    });\n  };\n\n  _proto.onRemove = function onRemove() {\n    if (this.div && this.div.parentNode) {\n      this.hide();\n\n      if (this.boundsChangedListener !== null) {\n        google.maps.event.removeListener(this.boundsChangedListener);\n      }\n\n      google.maps.event.clearInstanceListeners(this.div);\n      this.div.parentNode.removeChild(this.div);\n      this.div = null;\n    }\n  };\n\n  _proto.draw = function draw() {\n    if (this.visible && this.div !== null && this.center) {\n      var _this$getPosFromLatLn = this.getPosFromLatLng(this.center),\n          x = _this$getPosFromLatLn.x,\n          y = _this$getPosFromLatLn.y;\n\n      this.div.style.top = y + 'px';\n      this.div.style.left = x + 'px';\n    }\n  };\n\n  _proto.hide = function hide() {\n    if (this.div) {\n      this.div.style.display = 'none';\n    }\n\n    this.visible = false;\n  };\n\n  _proto.show = function show() {\n    if (this.div && this.center) {\n      var img = '',\n          divTitle = ''; // NOTE: values must be specified in px units\n\n      var bp = this.backgroundPosition.split(' ');\n      var spriteH = parseInt(bp[0].replace(/^\\s+|\\s+$/g, ''), 10);\n      var spriteV = parseInt(bp[1].replace(/^\\s+|\\s+$/g, ''), 10);\n      var pos = this.getPosFromLatLng(this.center);\n\n      if (this.sums === null || typeof this.sums.title === 'undefined' || this.sums.title === '') {\n        divTitle = this.cluster.getClusterer().getTitle();\n      } else {\n        divTitle = this.sums.title;\n      }\n\n      this.div.style.cssText = this.createCss(pos);\n      img = \"<img alt='\" + divTitle + \"' src='\" + this.url + \"' style='position: absolute; top: \" + spriteV + 'px; left: ' + spriteH + 'px; '; // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      //@ts-ignore\n\n      if (!this.cluster.getClusterer().enableRetinaIcons) {\n        img += 'clip: rect(' + -1 * spriteV + 'px, ' + (-1 * spriteH + this.width) + 'px, ' + (-1 * spriteV + this.height) + 'px, ' + -1 * spriteH + 'px);';\n      }\n\n      img += \"'>\";\n      this.div.innerHTML = img + \"<div style='\" + 'position: absolute;' + 'top: ' + this.anchorText[0] + 'px;' + 'left: ' + this.anchorText[1] + 'px;' + 'color: ' + this.textColor + ';' + 'font-size: ' + this.textSize + 'px;' + 'font-family: ' + this.fontFamily + ';' + 'font-weight: ' + this.fontWeight + ';' + 'font-style: ' + this.fontStyle + ';' + 'text-decoration: ' + this.textDecoration + ';' + 'text-align: center;' + 'width: ' + this.width + 'px;' + 'line-height:' + this.height + 'px;' + \"'>\" + // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      this.sums.text + '</div>';\n      this.div.title = divTitle;\n      this.div.style.display = '';\n    }\n\n    this.visible = true;\n  };\n\n  _proto.useStyle = function useStyle(sums) {\n    this.sums = sums;\n    var style = this.styles[Math.min(this.styles.length - 1, Math.max(0, sums.index - 1))];\n    this.url = style.url;\n    this.height = style.height;\n    this.width = style.width;\n    this.anchorText = style.anchorText || [0, 0];\n    this.anchorIcon = style.anchorIcon || [this.height / 2, this.width / 2];\n    this.textColor = style.textColor || 'black';\n    this.textSize = style.textSize || 11;\n    this.textDecoration = style.textDecoration || 'none';\n    this.fontWeight = style.fontWeight || 'bold';\n    this.fontStyle = style.fontStyle || 'normal';\n    this.fontFamily = style.fontFamily || 'Arial,sans-serif';\n    this.backgroundPosition = style.backgroundPosition || '0 0';\n  };\n\n  _proto.setCenter = function setCenter(center) {\n    this.center = center;\n  };\n\n  _proto.createCss = function createCss(pos) {\n    var style = [];\n    style.push('cursor: pointer;');\n    style.push('position: absolute; top: ' + pos.y + 'px; left: ' + pos.x + 'px;');\n    style.push('width: ' + this.width + 'px; height: ' + this.height + 'px;');\n    return style.join('');\n  };\n\n  _proto.getPosFromLatLng = function getPosFromLatLng(latlng) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    var pos = this.getProjection().fromLatLngToDivPixel(latlng);\n    pos.x -= this.anchorIcon[1];\n    pos.y -= this.anchorIcon[0]; // pos.x = pos.x\n    // pos.y = pos.y\n\n    return pos;\n  };\n\n  return ClusterIcon;\n}();\n\nvar Cluster = /*#__PURE__*/function () {\n  function Cluster(markerClusterer) {\n    this.markerClusterer = markerClusterer; // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n\n    this.map = this.markerClusterer.getMap();\n    this.gridSize = this.markerClusterer.getGridSize();\n    this.minClusterSize = this.markerClusterer.getMinimumClusterSize();\n    this.averageCenter = this.markerClusterer.getAverageCenter();\n    this.markers = [];\n    this.center = undefined;\n    this.bounds = null;\n    this.clusterIcon = new ClusterIcon(this, this.markerClusterer.getStyles());\n  }\n\n  var _proto = Cluster.prototype;\n\n  _proto.getSize = function getSize() {\n    return this.markers.length;\n  };\n\n  _proto.getMarkers = function getMarkers() {\n    return this.markers;\n  };\n\n  _proto.getCenter = function getCenter() {\n    return this.center;\n  };\n\n  _proto.getMap = function getMap() {\n    return this.map;\n  };\n\n  _proto.getClusterer = function getClusterer() {\n    return this.markerClusterer;\n  };\n\n  _proto.getBounds = function getBounds() {\n    var bounds = new google.maps.LatLngBounds(this.center, this.center);\n    var markers = this.getMarkers();\n\n    for (var i = 0; i < markers.length; i++) {\n      var position = markers[i].getPosition();\n\n      if (position) {\n        bounds.extend(position);\n      }\n    }\n\n    return bounds;\n  };\n\n  _proto.remove = function remove() {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.clusterIcon.setMap(null);\n    this.markers = [];\n    delete this.markers;\n  };\n\n  _proto.addMarker = function addMarker(marker) {\n    if (this.isMarkerAlreadyAdded(marker)) {\n      return false;\n    }\n\n    if (!this.center) {\n      var position = marker.getPosition();\n\n      if (position) {\n        this.center = position;\n        this.calculateBounds();\n      }\n    } else {\n      if (this.averageCenter) {\n        var _position = marker.getPosition();\n\n        if (_position) {\n          var length = this.markers.length + 1;\n          this.center = new google.maps.LatLng((this.center.lat() * (length - 1) + _position.lat()) / length, (this.center.lng() * (length - 1) + _position.lng()) / length);\n          this.calculateBounds();\n        }\n      }\n    }\n\n    marker.isAdded = true;\n    this.markers.push(marker);\n    var mCount = this.markers.length;\n    var maxZoom = this.markerClusterer.getMaxZoom();\n\n    if (maxZoom !== null && this.map.getZoom() > maxZoom) {\n      // Zoomed in past max zoom, so show the marker.\n      if (marker.getMap() !== this.map) {\n        marker.setMap(this.map);\n      }\n    } else if (mCount < this.minClusterSize) {\n      // Min cluster size not reached so show the marker.\n      if (marker.getMap() !== this.map) {\n        marker.setMap(this.map);\n      }\n    } else if (mCount === this.minClusterSize) {\n      // Hide the markers that were showing.\n      for (var i = 0; i < mCount; i++) {\n        this.markers[i].setMap(null);\n      }\n    } else {\n      marker.setMap(null);\n    }\n\n    this.updateIcon();\n    return true;\n  };\n\n  _proto.isMarkerInClusterBounds = function isMarkerInClusterBounds(marker) {\n    if (this.bounds !== null) {\n      var position = marker.getPosition();\n\n      if (position) {\n        return this.bounds.contains(position);\n      }\n    }\n\n    return false;\n  };\n\n  _proto.calculateBounds = function calculateBounds() {\n    this.bounds = this.markerClusterer.getExtendedBounds(new google.maps.LatLngBounds(this.center, this.center));\n  };\n\n  _proto.updateIcon = function updateIcon() {\n    var mCount = this.markers.length;\n    var maxZoom = this.markerClusterer.getMaxZoom();\n\n    if (maxZoom !== null && this.map.getZoom() > maxZoom) {\n      this.clusterIcon.hide();\n      return;\n    }\n\n    if (mCount < this.minClusterSize) {\n      // Min cluster size not yet reached.\n      this.clusterIcon.hide();\n      return;\n    }\n\n    if (this.center) {\n      this.clusterIcon.setCenter(this.center);\n    }\n\n    this.clusterIcon.useStyle(this.markerClusterer.getCalculator()(this.markers, this.markerClusterer.getStyles().length));\n    this.clusterIcon.show();\n  };\n\n  _proto.isMarkerAlreadyAdded = function isMarkerAlreadyAdded(marker) {\n    if (this.markers.indexOf) {\n      return this.markers.includes(marker);\n    } else {\n      for (var i = 0; i < this.markers.length; i++) {\n        if (marker === this.markers[i]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  return Cluster;\n}();\n/* global google */\n\n\nvar CALCULATOR = function CALCULATOR(markers, numStyles) {\n  var index = 0;\n  var title = '';\n  var count = markers.length.toString();\n  var dv = count;\n\n  while (dv !== 0) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    dv = parseInt(dv, 10) / 10;\n    index++;\n  }\n\n  index = Math.min(index, numStyles);\n  return {\n    text: count,\n    index: index,\n    title: title\n  };\n};\n\nvar BATCH_SIZE = 2000;\nvar BATCH_SIZE_IE = 500;\nvar IMAGE_PATH = 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m';\nvar IMAGE_EXTENSION = 'png';\nvar IMAGE_SIZES = [53, 56, 66, 78, 90];\nvar CLUSTERER_CLASS = 'cluster';\n\nvar Clusterer = /*#__PURE__*/function () {\n  function Clusterer(map, optMarkers, optOptions) {\n    if (optMarkers === void 0) {\n      optMarkers = [];\n    }\n\n    if (optOptions === void 0) {\n      optOptions = {};\n    }\n\n    this.extend(Clusterer, google.maps.OverlayView);\n    this.markers = [];\n    this.clusters = [];\n    this.listeners = [];\n    this.activeMap = null;\n    this.ready = false;\n    this.gridSize = optOptions.gridSize || 60;\n    this.minClusterSize = optOptions.minimumClusterSize || 2;\n    this.maxZoom = optOptions.maxZoom || null;\n    this.styles = optOptions.styles || [];\n    this.title = optOptions.title || '';\n    this.zoomOnClick = true;\n\n    if (optOptions.zoomOnClick !== undefined) {\n      this.zoomOnClick = optOptions.zoomOnClick;\n    }\n\n    this.averageCenter = false;\n\n    if (optOptions.averageCenter !== undefined) {\n      this.averageCenter = optOptions.averageCenter;\n    }\n\n    this.ignoreHidden = false;\n\n    if (optOptions.ignoreHidden !== undefined) {\n      this.ignoreHidden = optOptions.ignoreHidden;\n    }\n\n    this.enableRetinaIcons = false;\n\n    if (optOptions.enableRetinaIcons !== undefined) {\n      this.enableRetinaIcons = optOptions.enableRetinaIcons;\n    }\n\n    this.imagePath = optOptions.imagePath || IMAGE_PATH;\n    this.imageExtension = optOptions.imageExtension || IMAGE_EXTENSION;\n    this.imageSizes = optOptions.imageSizes || IMAGE_SIZES;\n    this.calculator = optOptions.calculator || CALCULATOR;\n    this.batchSize = optOptions.batchSize || BATCH_SIZE;\n    this.batchSizeIE = optOptions.batchSizeIE || BATCH_SIZE_IE;\n    this.clusterClass = optOptions.clusterClass || CLUSTERER_CLASS;\n\n    if (navigator.userAgent.toLowerCase().indexOf('msie') !== -1) {\n      // Try to avoid IE timeout when processing a huge number of markers:\n      this.batchSize = this.batchSizeIE;\n    }\n\n    this.timerRefStatic = null;\n    this.setupStyles();\n    this.addMarkers(optMarkers, true); // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n\n    this.setMap(map); // Note: this causes onAdd to be called\n  }\n\n  var _proto = Clusterer.prototype;\n\n  _proto.onAdd = function onAdd() {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n\n\n    this.activeMap = this.getMap();\n    this.ready = true;\n    this.repaint(); // Add the map event listeners\n\n    this.listeners = [google.maps.event.addListener( // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.getMap(), 'zoom_changed', // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n    function () {\n      _this.resetViewport(false); // Workaround for this Google bug: when map is at level 0 and \"-\" of\n      // zoom slider is clicked, a \"zoom_changed\" event is fired even though\n      // the map doesn't zoom out any further. In this situation, no \"idle\"\n      // event is triggered so the cluster markers that have been removed\n      // do not get redrawn. Same goes for a zoom in at maxZoom.\n\n\n      if ( // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      _this.getMap().getZoom() === (_this.get('minZoom') || 0) || // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      _this.getMap().getZoom() === _this.get('maxZoom')) {\n        google.maps.event.trigger(_this, 'idle');\n      }\n    }), google.maps.event.addListener( // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.getMap(), 'idle', // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n    function () {\n      _this.redraw();\n    })];\n  } // eslint-disable-next-line @getify/proper-arrows/this\n  ;\n\n  _proto.onRemove = function onRemove() {\n    // Put all the managed markers back on the map:\n    for (var i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].getMap() !== this.activeMap) {\n        this.markers[i].setMap(this.activeMap);\n      }\n    } // Remove all clusters:\n\n\n    for (var _i = 0; _i < this.clusters.length; _i++) {\n      this.clusters[_i].remove();\n    }\n\n    this.clusters = []; // Remove map event listeners:\n\n    for (var _i2 = 0; _i2 < this.listeners.length; _i2++) {\n      google.maps.event.removeListener(this.listeners[_i2]);\n    }\n\n    this.listeners = [];\n    this.activeMap = null;\n    this.ready = false;\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n  ;\n\n  _proto.draw = function draw() {};\n\n  _proto.setupStyles = function setupStyles() {\n    if (this.styles.length > 0) {\n      return;\n    }\n\n    for (var i = 0; i < this.imageSizes.length; i++) {\n      this.styles.push({\n        url: this.imagePath + (i + 1) + '.' + this.imageExtension,\n        height: this.imageSizes[i],\n        width: this.imageSizes[i]\n      });\n    }\n  };\n\n  _proto.fitMapToMarkers = function fitMapToMarkers() {\n    var markers = this.getMarkers();\n    var bounds = new google.maps.LatLngBounds();\n\n    for (var i = 0; i < markers.length; i++) {\n      var position = markers[i].getPosition();\n\n      if (position) {\n        bounds.extend(position);\n      }\n    } // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n\n\n    this.getMap().fitBounds(bounds);\n  };\n\n  _proto.getGridSize = function getGridSize() {\n    return this.gridSize;\n  };\n\n  _proto.setGridSize = function setGridSize(gridSize) {\n    this.gridSize = gridSize;\n  };\n\n  _proto.getMinimumClusterSize = function getMinimumClusterSize() {\n    return this.minClusterSize;\n  };\n\n  _proto.setMinimumClusterSize = function setMinimumClusterSize(minimumClusterSize) {\n    this.minClusterSize = minimumClusterSize;\n  };\n\n  _proto.getMaxZoom = function getMaxZoom() {\n    return this.maxZoom;\n  };\n\n  _proto.setMaxZoom = function setMaxZoom(maxZoom) {\n    this.maxZoom = maxZoom;\n  };\n\n  _proto.getStyles = function getStyles() {\n    return this.styles;\n  };\n\n  _proto.setStyles = function setStyles(styles) {\n    this.styles = styles;\n  };\n\n  _proto.getTitle = function getTitle() {\n    return this.title;\n  };\n\n  _proto.setTitle = function setTitle(title) {\n    this.title = title;\n  };\n\n  _proto.getZoomOnClick = function getZoomOnClick() {\n    return this.zoomOnClick;\n  };\n\n  _proto.setZoomOnClick = function setZoomOnClick(zoomOnClick) {\n    this.zoomOnClick = zoomOnClick;\n  };\n\n  _proto.getAverageCenter = function getAverageCenter() {\n    return this.averageCenter;\n  };\n\n  _proto.setAverageCenter = function setAverageCenter(averageCenter) {\n    this.averageCenter = averageCenter;\n  };\n\n  _proto.getIgnoreHidden = function getIgnoreHidden() {\n    return this.ignoreHidden;\n  };\n\n  _proto.setIgnoreHidden = function setIgnoreHidden(ignoreHidden) {\n    this.ignoreHidden = ignoreHidden;\n  };\n\n  _proto.getEnableRetinaIcons = function getEnableRetinaIcons() {\n    return this.enableRetinaIcons;\n  };\n\n  _proto.setEnableRetinaIcons = function setEnableRetinaIcons(enableRetinaIcons) {\n    this.enableRetinaIcons = enableRetinaIcons;\n  };\n\n  _proto.getImageExtension = function getImageExtension() {\n    return this.imageExtension;\n  };\n\n  _proto.setImageExtension = function setImageExtension(imageExtension) {\n    this.imageExtension = imageExtension;\n  };\n\n  _proto.getImagePath = function getImagePath() {\n    return this.imagePath;\n  };\n\n  _proto.setImagePath = function setImagePath(imagePath) {\n    this.imagePath = imagePath;\n  };\n\n  _proto.getImageSizes = function getImageSizes() {\n    return this.imageSizes;\n  };\n\n  _proto.setImageSizes = function setImageSizes(imageSizes) {\n    this.imageSizes = imageSizes;\n  };\n\n  _proto.getCalculator = function getCalculator() {\n    return this.calculator;\n  };\n\n  _proto.setCalculator = function setCalculator(calculator) {\n    this.calculator = calculator;\n  };\n\n  _proto.getBatchSizeIE = function getBatchSizeIE() {\n    return this.batchSizeIE;\n  };\n\n  _proto.setBatchSizeIE = function setBatchSizeIE(batchSizeIE) {\n    this.batchSizeIE = batchSizeIE;\n  };\n\n  _proto.getClusterClass = function getClusterClass() {\n    return this.clusterClass;\n  };\n\n  _proto.setClusterClass = function setClusterClass(clusterClass) {\n    this.clusterClass = clusterClass;\n  };\n\n  _proto.getMarkers = function getMarkers() {\n    return this.markers;\n  };\n\n  _proto.getTotalMarkers = function getTotalMarkers() {\n    return this.markers.length;\n  };\n\n  _proto.getClusters = function getClusters() {\n    return this.clusters;\n  };\n\n  _proto.getTotalClusters = function getTotalClusters() {\n    return this.clusters.length;\n  };\n\n  _proto.addMarker = function addMarker(marker, optNoDraw) {\n    this.pushMarkerTo(marker);\n\n    if (!optNoDraw) {\n      this.redraw();\n    }\n  };\n\n  _proto.addMarkers = function addMarkers(markers, optNoDraw) {\n    for (var key in markers) {\n      if (markers.hasOwnProperty(key)) {\n        this.pushMarkerTo(markers[key]);\n      }\n    }\n\n    if (!optNoDraw) {\n      this.redraw();\n    }\n  };\n\n  _proto.pushMarkerTo = function pushMarkerTo(marker) {\n    var _this2 = this; // If the marker is draggable add a listener so we can update the clusters on the dragend:\n\n\n    if (marker.getDraggable()) {\n      // eslint-disable-next-line @getify/proper-arrows/name, @getify/proper-arrows/this\n      google.maps.event.addListener(marker, 'dragend', function () {\n        if (_this2.ready) {\n          marker.isAdded = false;\n\n          _this2.repaint();\n        }\n      });\n    }\n\n    marker.isAdded = false;\n    this.markers.push(marker);\n  };\n\n  _proto.removeMarker_ = function removeMarker_(marker) {\n    var index = -1;\n\n    if (this.markers.indexOf) {\n      index = this.markers.indexOf(marker);\n    } else {\n      for (var i = 0; i < this.markers.length; i++) {\n        if (marker === this.markers[i]) {\n          index = i;\n          break;\n        }\n      }\n    }\n\n    if (index === -1) {\n      // Marker is not in our list of markers, so do nothing:\n      return false;\n    }\n\n    marker.setMap(null);\n    this.markers.splice(index, 1); // Remove the marker from the list of managed markers\n\n    return true;\n  };\n\n  _proto.removeMarker = function removeMarker(marker, optNoDraw) {\n    var removed = this.removeMarker_(marker);\n\n    if (!optNoDraw && removed) {\n      this.repaint();\n    }\n\n    return removed;\n  };\n\n  _proto.removeMarkers = function removeMarkers(markers, optNoDraw) {\n    var removed = false;\n\n    for (var i = 0; i < markers.length; i++) {\n      removed = removed || this.removeMarker_(markers[i]);\n    }\n\n    if (!optNoDraw && removed) {\n      this.repaint();\n    }\n\n    return removed;\n  };\n\n  _proto.clearMarkers = function clearMarkers() {\n    this.resetViewport(true);\n    this.markers = [];\n  };\n\n  _proto.repaint = function repaint() {\n    var oldClusters = this.clusters.slice();\n    this.clusters = [];\n    this.resetViewport(false);\n    this.redraw(); // Remove the old clusters.\n    // Do it in a timeout to prevent blinking effect.\n\n    setTimeout(function timeout() {\n      for (var i = 0; i < oldClusters.length; i++) {\n        oldClusters[i].remove();\n      }\n    }, 0);\n  };\n\n  _proto.getExtendedBounds = function getExtendedBounds(bounds) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    var projection = this.getProjection(); // Convert the points to pixels and the extend out by the grid size.\n\n    var trPix = projection.fromLatLngToDivPixel( // Turn the bounds into latlng.\n    new google.maps.LatLng(bounds.getNorthEast().lat(), bounds.getNorthEast().lng()));\n    trPix.x += this.gridSize;\n    trPix.y -= this.gridSize;\n    var blPix = projection.fromLatLngToDivPixel( // Turn the bounds into latlng.\n    new google.maps.LatLng(bounds.getSouthWest().lat(), bounds.getSouthWest().lng()));\n    blPix.x -= this.gridSize;\n    blPix.y += this.gridSize; // Extend the bounds to contain the new bounds.\n\n    bounds.extend( // Convert the pixel points back to LatLng nw\n    projection.fromDivPixelToLatLng(trPix));\n    bounds.extend( // Convert the pixel points back to LatLng sw\n    projection.fromDivPixelToLatLng(blPix));\n    return bounds;\n  };\n\n  _proto.redraw = function redraw() {\n    // Redraws all the clusters.\n    this.createClusters(0);\n  };\n\n  _proto.resetViewport = function resetViewport(optHide) {\n    // Remove all the clusters\n    for (var i = 0; i < this.clusters.length; i++) {\n      this.clusters[i].remove();\n    }\n\n    this.clusters = []; // Reset the markers to not be added and to be removed from the map.\n\n    for (var _i3 = 0; _i3 < this.markers.length; _i3++) {\n      var marker = this.markers[_i3];\n      marker.isAdded = false;\n\n      if (optHide) {\n        marker.setMap(null);\n      }\n    }\n  };\n\n  _proto.distanceBetweenPoints = function distanceBetweenPoints(p1, p2) {\n    var R = 6371; // Radius of the Earth in km\n\n    var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;\n    var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));\n  };\n\n  _proto.isMarkerInBounds = function isMarkerInBounds(marker, bounds) {\n    var position = marker.getPosition();\n\n    if (position) {\n      return bounds.contains(position);\n    }\n\n    return false;\n  };\n\n  _proto.addToClosestCluster = function addToClosestCluster(marker) {\n    var cluster;\n    var distance = 40000; // Some large number\n\n    var clusterToAddTo = null;\n\n    for (var i = 0; i < this.clusters.length; i++) {\n      cluster = this.clusters[i];\n      var center = cluster.getCenter();\n      var position = marker.getPosition();\n\n      if (center && position) {\n        var d = this.distanceBetweenPoints(center, position);\n\n        if (d < distance) {\n          distance = d;\n          clusterToAddTo = cluster;\n        }\n      }\n    }\n\n    if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {\n      clusterToAddTo.addMarker(marker);\n    } else {\n      cluster = new Cluster(this);\n      cluster.addMarker(marker);\n      this.clusters.push(cluster);\n    }\n  };\n\n  _proto.createClusters = function createClusters(iFirst) {\n    var _this3 = this;\n\n    if (!this.ready) {\n      return;\n    } // Cancel previous batch processing if we're working on the first batch:\n\n\n    if (iFirst === 0) {\n      /**\r\n       * This event is fired when the <code>Clusterer</code> begins\r\n       *  clustering markers.\r\n       * @name Clusterer#clusteringbegin\r\n       * @param {Clusterer} mc The Clusterer whose markers are being clustered.\r\n       * @event\r\n       */\n      google.maps.event.trigger(this, 'clusteringbegin', this);\n\n      if (this.timerRefStatic !== null) {\n        window.clearTimeout(this.timerRefStatic);\n        delete this.timerRefStatic;\n      }\n    } // Get our current map view bounds.\n    // Create a new bounds object so we don't affect the map.\n    //\n    // See Comments 9 & 11 on Issue 3651 relating to this workaround for a Google Maps bug:\n\n\n    var mapBounds = // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.getMap().getZoom() > 3 ? new google.maps.LatLngBounds( // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.getMap().getBounds().getSouthWest(), // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.getMap().getBounds().getNorthEast()) : new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472, -178.48388434375), new google.maps.LatLng(-85.08136444384544, 178.00048865625));\n    var bounds = this.getExtendedBounds(mapBounds);\n    var iLast = Math.min(iFirst + this.batchSize, this.markers.length);\n\n    for (var i = iFirst; i < iLast; i++) {\n      var marker = this.markers[i];\n\n      if (!marker.isAdded && this.isMarkerInBounds(marker, bounds)) {\n        if (!this.ignoreHidden || this.ignoreHidden && marker.getVisible()) {\n          this.addToClosestCluster(marker);\n        }\n      }\n    }\n\n    if (iLast < this.markers.length) {\n      this.timerRefStatic = window.setTimeout( // eslint-disable-next-line @getify/proper-arrows/this, @getify/proper-arrows/name\n      function () {\n        _this3.createClusters(iLast);\n      }, 0);\n    } else {\n      this.timerRefStatic = null;\n      /**\r\n       * This event is fired when the <code>Clusterer</code> stops\r\n       *  clustering markers.\r\n       * @name Clusterer#clusteringend\r\n       * @param {Clusterer} mc The Clusterer whose markers are being clustered.\r\n       * @event\r\n       */\n\n      google.maps.event.trigger(this, 'clusteringend', this);\n    }\n  };\n\n  _proto.extend = function extend(obj1, obj2) {\n    return function applyExtend(object) {\n      // eslint-disable-next-line guard-for-in\n      for (var property in object.prototype) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        this.prototype[property] = object.prototype[property];\n      } // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n\n\n      return this;\n    }.apply(obj1, [obj2]);\n  };\n\n  return Clusterer;\n}();\n\nexport { Cluster, ClusterIcon, Clusterer };","map":{"version":3,"sources":["../src/ClusterIcon.tsx","../src/Cluster.tsx","../src/Clusterer.tsx"],"names":["ClusterIcon","cluster","google","onAdd","document","cDraggingMapByCluster","cMouseDownInCluster","markerClusterer","maxZoom","bounds","setTimeout","event","onRemove","draw","x","y","hide","show","img","divTitle","bp","spriteH","parseInt","spriteV","pos","useStyle","style","Math","sums","setCenter","createCss","getPosFromLatLng","Cluster","getSize","getMarkers","getCenter","getMap","getClusterer","getBounds","markers","i","position","remove","addMarker","marker","length","mCount","isMarkerInClusterBounds","calculateBounds","updateIcon","isMarkerAlreadyAdded","CALCULATOR","index","title","count","dv","text","BATCH_SIZE","BATCH_SIZE_IE","IMAGE_PATH","IMAGE_EXTENSION","IMAGE_SIZES","CLUSTERER_CLASS","Clusterer","optMarkers","optOptions","navigator","setupStyles","url","height","width","fitMapToMarkers","getGridSize","setGridSize","getMinimumClusterSize","setMinimumClusterSize","getMaxZoom","setMaxZoom","getStyles","setStyles","getTitle","setTitle","getZoomOnClick","setZoomOnClick","getAverageCenter","setAverageCenter","getIgnoreHidden","setIgnoreHidden","getEnableRetinaIcons","setEnableRetinaIcons","getImageExtension","setImageExtension","getImagePath","setImagePath","getImageSizes","setImageSizes","getCalculator","setCalculator","getBatchSizeIE","setBatchSizeIE","getClusterClass","setClusterClass","getTotalMarkers","getClusters","getTotalClusters","addMarkers","pushMarkerTo","removeMarker_","removeMarker","removed","removeMarkers","clearMarkers","repaint","oldClusters","getExtendedBounds","projection","trPix","blPix","redraw","resetViewport","distanceBetweenPoints","R","dLat","p2","p1","dLon","a","isMarkerInBounds","addToClosestCluster","distance","clusterToAddTo","center","d","createClusters","iFirst","window","mapBounds","iLast","extend","object"],"mappings":"IAMaA,WAAb,GAAA,aAAA,YAAA;AAuBE,WAAA,WAAA,CAAA,OAAA,EAAA,MAAA,EAAA;AACEC,IAAAA,OAAO,CAAPA,YAAAA,GAAAA,MAAAA,CAAAA,WAAAA,EAA2CC,MAAM,CAANA,IAAAA,CAA3CD,WAAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,SAAA,GAAiB,KAAA,OAAA,CAAA,YAAA,GAAjB,eAAiB,EAAjB;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,MAAA,GAAA,SAAA;AACA,SAAA,GAAA,GAAA,IAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,OAAA,GAAA,KAAA;AACA,SAAA,qBAAA,GAAA,IAAA;AACA,SAAA,GAAA,GAAA,EAAA;AACA,SAAA,MAAA,GAAA,CAAA;AACA,SAAA,KAAA,GAAA,CAAA;AACA,SAAA,UAAA,GAAkB,CAAA,CAAA,EAAlB,CAAkB,CAAlB;AACA,SAAA,UAAA,GAAkB,CAAA,CAAA,EAAlB,CAAkB,CAAlB;AACA,SAAA,SAAA,GAAA,OAAA;AACA,SAAA,QAAA,GAAA,EAAA;AACA,SAAA,cAAA,GAAA,MAAA;AACA,SAAA,UAAA,GAAA,MAAA;AACA,SAAA,SAAA,GAAA,QAAA;AACA,SAAA,UAAA,GAAA,kBAAA;AACA,SAAA,kBAAA,GAAA,KAAA,CArBF,CAqBE;AAEA;;AACA,SAAA,MAAA,CAAYA,OAAO,CAAnB,MAAYA,EAAZ,EAxBF,CAwBE;AACD;;AAhDH,MAAA,MAAA,GAAA,WAAA,CAAA,SAAA;;AAAA,EAAA,MAAA,CAAA,KAAA,GAkDEE,SAAAA,KAAAA,GAAAA;;;AACE,QAAA,mBAAA;AACA,QAAA,qBAAA;AAEA,SAAA,GAAA,GAAWC,QAAQ,CAARA,aAAAA,CAAX,KAAWA,CAAX;AACA,SAAA,GAAA,CAAA,SAAA,GAAqB,KAArB,SAAA;;AACA,QAAI,KAAJ,OAAA,EAAkB;AAChB,WAAA,IAAA;AACD,KARHD,CAQG;AAGD;;;AACA,SAAA,QAAA,GAAA,kBAAA,CAAA,WAAA,CAA+C,KAA/C,GAAA,EAZFA,CAYE;;AAGA,SAAA,qBAAA,GAA6B,MAAM,CAAN,IAAA,CAAA,KAAA,CAAA,WAAA,EAAA;AAE3B;AACA,SAH2B,MAG3B,EAH2B,EAAA,eAAA,EAK3B,SAAA,aAAA,GAAA;AACEE,MAAAA,qBAAqB,GAArBA,mBAAAA;AANJ,KAA6B,CAA7B;AAUAH,IAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAiC,KAAjCA,GAAAA,EAAAA,WAAAA,EAAwD,SAAA,WAAA,GAAA;AACtDI,MAAAA,mBAAmB,GAAnBA,IAAAA;AACAD,MAAAA,qBAAqB,GAArBA,KAAAA;AAFFH,KAAAA,EAzBFC,CAyBED;;AAMAA,IAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CACE,KADFA,GAAAA,EAAAA,OAAAA,EAAAA;AAIE,cAAA,KAAA,EAAA;AACEI,MAAAA,mBAAmB,GAAnBA,KAAAA;;AAEA,UAAI,CAAJ,qBAAA,EAA4B;AAC1B,YAAMC,eAAe,GAAG,KAAI,CAAJ,OAAA,CAAxB,YAAwB,EAAxB;AAEA;;;;;;;;AAMAL,QAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,eAAAA,EAAAA,OAAAA,EAAoD,KAAI,CAAxDA,OAAAA;AACAA,QAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,eAAAA,EAAAA,cAAAA,EAA2D,KAAI,CAVrC,OAU1BA,EAV0B,CAAA;AAY1B;AACA;;AACA,YAAIK,eAAe,CAAnB,cAAIA,EAAJ,EAAsC;AACpC;AACA,cAAMC,OAAO,GAAGD,eAAe,CAA/B,UAAgBA,EAAhB;;AAEA,cAAME,MAAM,GAAG,KAAI,CAAJ,OAAA,CAJqB,SAIrB,EAAf,CAJoC,CAAA;AAOpC;;;AACAF,UAAAA,eAAe,CAAfA,MAAAA,GAAAA,SAAAA,CARoC,MAQpCA,EARoC,CAAA;;AAWpCG,UAAAA,UAAU,CAAC,SAAA,OAAA,GAAA;AACT;AACA;AACAH,YAAAA,eAAe,CAAfA,MAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAHS,CAGTA;AAGA;AACA;;AACA,gBAAIC,OAAO,KAAPA,IAAAA,IAAoBD,eAAe,CAAfA,MAAAA,GAAAA,OAAAA,KAAxB,OAAA,EAAsE;AACpE;AACA;AACAA,cAAAA,eAAe,CAAfA,MAAAA,GAAAA,OAAAA,CAAiCC,OAAO,GAAxCD,CAAAA;AACD;AAZO,WAAA,EAAVG,GAAU,CAAVA;AAzBwB,SAAA,CAAA;;;AA0C1BC,QAAAA,KAAK,CAALA,YAAAA,GAAAA,IAAAA;;AAEA,YAAIA,KAAK,CAAT,eAAA,EAA2B;AACzBA,UAAAA,KAAK,CAALA,eAAAA;AACD;AACF;AAtDLT,KAAAA;AA0DAA,IAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CACE,KADFA,GAAAA,EAAAA,WAAAA,EAAAA;AAIE,gBAAA;AACE;;;;;;AAMAA,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAA0B,KAAI,CAAJ,OAAA,CAA1BA,YAA0B,EAA1BA,EAAAA,WAAAA,EAAoE,KAAI,CAAxEA,OAAAA;AAXJA,KAAAA,EAzFFC,CAyFED;;AAgBAA,IAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CACE,KADFA,GAAAA,EAAAA,UAAAA,EAAAA;AAIE,gBAAA;AACE;;;;;;AAMAA,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAA0B,KAAI,CAAJ,OAAA,CAA1BA,YAA0B,EAA1BA,EAAAA,UAAAA,EAAmE,KAAI,CAAvEA,OAAAA;AAXJA,KAAAA;AA3JJ,GAAA;;AAAA,EAAA,MAAA,CAAA,QAAA,GA2KEU,SAAAA,QAAAA,GAAAA;AACE,QAAI,KAAA,GAAA,IAAY,KAAA,GAAA,CAAhB,UAAA,EAAqC;AACnC,WAAA,IAAA;;AAEA,UAAI,KAAA,qBAAA,KAAJ,IAAA,EAAyC;AACvCV,QAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAiC,KAAjCA,qBAAAA;AACD;;AAEDA,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,sBAAAA,CAAyC,KAAzCA,GAAAA;AAEA,WAAA,GAAA,CAAA,UAAA,CAAA,WAAA,CAAgC,KAAhC,GAAA;AAEA,WAAA,GAAA,GAAA,IAAA;AACD;AAxLL,GAAA;;AAAA,EAAA,MAAA,CAAA,IAAA,GA2LEW,SAAAA,IAAAA,GAAAA;AACE,QAAI,KAAA,OAAA,IAAgB,KAAA,GAAA,KAAhB,IAAA,IAAqC,KAAzC,MAAA,EAAsD;AAAA,UAAA,qBAAA,GACnC,KAAA,gBAAA,CAAsB,KADa,MACnC,CADmC;AAAA,UAC5CC,CAD4C,GAAA,qBAAA,CAAA,CAAA;AAAA,UACzCC,CADyC,GAAA,qBAAA,CAAA,CAAA;;AAGpD,WAAA,GAAA,CAAA,KAAA,CAAA,GAAA,GAAqBA,CAAC,GAAtB,IAAA;AACA,WAAA,GAAA,CAAA,KAAA,CAAA,IAAA,GAAsBD,CAAC,GAAvB,IAAA;AACD;AAjML,GAAA;;AAAA,EAAA,MAAA,CAAA,IAAA,GAoMEE,SAAAA,IAAAA,GAAAA;AACE,QAAI,KAAJ,GAAA,EAAc;AACZ,WAAA,GAAA,CAAA,KAAA,CAAA,OAAA,GAAA,MAAA;AACD;;AAED,SAAA,OAAA,GAAA,KAAA;AAzMJ,GAAA;;AAAA,EAAA,MAAA,CAAA,IAAA,GA4MEC,SAAAA,IAAAA,GAAAA;AACE,QAAI,KAAA,GAAA,IAAY,KAAhB,MAAA,EAA6B;AAC3B,UAAIC,GAAG,GAAP,EAAA;AAAA,UACEC,QAAQ,GAFiB,EAC3B,CAD2B,CAAA;;AAK3B,UAAMC,EAAE,GAAG,KAAA,kBAAA,CAAA,KAAA,CAAX,GAAW,CAAX;AAEA,UAAMC,OAAO,GAAGC,QAAQ,CAACF,EAAE,CAAFA,CAAE,CAAFA,CAAAA,OAAAA,CAAAA,YAAAA,EAAD,EAACA,CAAD,EAAxB,EAAwB,CAAxB;AAEA,UAAMG,OAAO,GAAGD,QAAQ,CAACF,EAAE,CAAFA,CAAE,CAAFA,CAAAA,OAAAA,CAAAA,YAAAA,EAAD,EAACA,CAAD,EAAxB,EAAwB,CAAxB;AAEA,UAAMI,GAAG,GAAG,KAAA,gBAAA,CAAsB,KAAlC,MAAY,CAAZ;;AAEA,UAAI,KAAA,IAAA,KAAA,IAAA,IAAsB,OAAO,KAAA,IAAA,CAAP,KAAA,KAAtB,WAAA,IAAgE,KAAA,IAAA,CAAA,KAAA,KAApE,EAAA,EAA4F;AAC1FL,QAAAA,QAAQ,GAAG,KAAA,OAAA,CAAA,YAAA,GAAXA,QAAW,EAAXA;AADF,OAAA,MAEO;AACLA,QAAAA,QAAQ,GAAG,KAAA,IAAA,CAAXA,KAAAA;AACD;;AAED,WAAA,GAAA,CAAA,KAAA,CAAA,OAAA,GAAyB,KAAA,SAAA,CAAzB,GAAyB,CAAzB;AAEAD,MAAAA,GAAG,GACD,eAAA,QAAA,GAAA,SAAA,GAGA,KAHA,GAAA,GAAA,oCAAA,GAAA,OAAA,GAAA,YAAA,GAAA,OAAA,GAtByB,MAqB3BA,CArB2B,CAAA;AAiC3B;;AACA,UAAI,CAAC,KAAA,OAAA,CAAA,YAAA,GAAL,iBAAA,EAAoD;AAClDA,QAAAA,GAAG,IACD,gBACA,CAAA,CAAA,GADA,OAAA,GAAA,MAAA,IAGC,CAAA,CAAA,GAAA,OAAA,GAAe,KAHhB,KAAA,IAAA,MAAA,IAKC,CAAA,CAAA,GAAA,OAAA,GAAe,KALhB,MAAA,IAAA,MAAA,GAOA,CAAA,CAAA,GAPA,OAAA,GADFA,MAAAA;AAUD;;AAEDA,MAAAA,GAAG,IAAHA,IAAAA;AAEA,WAAA,GAAA,CAAA,SAAA,GACE,GAAG,GAAH,cAAA,GAAA,qBAAA,GAAA,OAAA,GAIA,KAAA,UAAA,CAJA,CAIA,CAJA,GAAA,KAAA,GAAA,QAAA,GAOA,KAAA,UAAA,CAPA,CAOA,CAPA,GAAA,KAAA,GAAA,SAAA,GAUA,KAVA,SAAA,GAAA,GAAA,GAAA,aAAA,GAaA,KAbA,QAAA,GAAA,KAAA,GAAA,eAAA,GAgBA,KAhBA,UAAA,GAAA,GAAA,GAAA,eAAA,GAmBA,KAnBA,UAAA,GAAA,GAAA,GAAA,cAAA,GAsBA,KAtBA,SAAA,GAAA,GAAA,GAAA,mBAAA,GAyBA,KAzBA,cAAA,GAAA,GAAA,GAAA,qBAAA,GAAA,SAAA,GA6BA,KA7BA,KAAA,GAAA,KAAA,GAAA,cAAA,GAgCA,KAhCA,MAAA,GAAA,KAAA,GAAA,IAAA,GAAA;AAoCA;AACA,WAAA,IAAA,CArCA,IAAA,GADF,QAAA;AAyCA,WAAA,GAAA,CAAA,KAAA,GAAA,QAAA;AAEA,WAAA,GAAA,CAAA,KAAA,CAAA,OAAA,GAAA,EAAA;AACD;;AAED,SAAA,OAAA,GAAA,IAAA;AA5SJ,GAAA;;AAAA,EAAA,MAAA,CAAA,QAAA,GA+SEO,SAAAA,QAAAA,CAAAA,IAAAA,EAAAA;AACE,SAAA,IAAA,GAAA,IAAA;AAEA,QAAMC,KAAK,GAAG,KAAA,MAAA,CAAYC,IAAI,CAAJA,GAAAA,CAAS,KAAA,MAAA,CAAA,MAAA,GAATA,CAAAA,EAAiCA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYC,IAAI,CAAJA,KAAAA,GAAvE,CAA2DD,CAAjCA,CAAZ,CAAd;AAEA,SAAA,GAAA,GAAWD,KAAK,CAAhB,GAAA;AACA,SAAA,MAAA,GAAcA,KAAK,CAAnB,MAAA;AACA,SAAA,KAAA,GAAaA,KAAK,CAAlB,KAAA;AACA,SAAA,UAAA,GAAkBA,KAAK,CAALA,UAAAA,IAAoB,CAAA,CAAA,EAAtC,CAAsC,CAAtC;AACA,SAAA,UAAA,GAAkBA,KAAK,CAALA,UAAAA,IAAoB,CAAC,KAAA,MAAA,GAAD,CAAA,EAAkB,KAAA,KAAA,GAAxD,CAAsC,CAAtC;AAEA,SAAA,SAAA,GAAiBA,KAAK,CAALA,SAAAA,IAAjB,OAAA;AAEA,SAAA,QAAA,GAAgBA,KAAK,CAALA,QAAAA,IAAhB,EAAA;AAEA,SAAA,cAAA,GAAsBA,KAAK,CAALA,cAAAA,IAAtB,MAAA;AAEA,SAAA,UAAA,GAAkBA,KAAK,CAALA,UAAAA,IAAlB,MAAA;AAEA,SAAA,SAAA,GAAiBA,KAAK,CAALA,SAAAA,IAAjB,QAAA;AAEA,SAAA,UAAA,GAAkBA,KAAK,CAALA,UAAAA,IAAlB,kBAAA;AAEA,SAAA,kBAAA,GAA0BA,KAAK,CAALA,kBAAAA,IAA1B,KAAA;AAtUJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GAyUEG,SAAAA,SAAAA,CAAAA,MAAAA,EAAAA;AACE,SAAA,MAAA,GAAA,MAAA;AA1UJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GA6UEC,SAAAA,SAAAA,CAAAA,GAAAA,EAAAA;AACE,QAAMJ,KAAK,GAAX,EAAA;AAEAA,IAAAA,KAAK,CAALA,IAAAA,CAAAA,kBAAAA;AAEAA,IAAAA,KAAK,CAALA,IAAAA,CAAW,8BAA8BF,GAAG,CAAjC,CAAA,GAAA,YAAA,GAAqDA,GAAG,CAAxD,CAAA,GAAXE,KAAAA;AAEAA,IAAAA,KAAK,CAALA,IAAAA,CAAW,YAAY,KAAZ,KAAA,GAAA,cAAA,GAA0C,KAA1C,MAAA,GAAXA,KAAAA;AAEA,WAAOA,KAAK,CAALA,IAAAA,CAAP,EAAOA,CAAP;AAtVJ,GAAA;;AAAA,EAAA,MAAA,CAAA,gBAAA,GAyVEK,SAAAA,gBAAAA,CAAAA,MAAAA,EAAAA;AACE;AACA;AACA,QAAMP,GAAG,GAAG,KAAA,aAAA,GAAA,oBAAA,CAAZ,MAAY,CAAZ;AAEAA,IAAAA,GAAG,CAAHA,CAAAA,IAAS,KAAA,UAAA,CAATA,CAAS,CAATA;AAEAA,IAAAA,GAAG,CAAHA,CAAAA,IAAS,KAAA,UAAA,CAATA,CAAS,CAATA,CAPFO,CAOEP;AAIA;;AAEA,WAAA,GAAA;AAtWJ,GAAA;;AAAA,SAAA,WAAA;AAAA,CAAA,E;;ICEaQ,OAAb,GAAA,aAAA,YAAA;AAWE,WAAA,OAAA,CAAA,eAAA,EAAA;AACE,SAAA,eAAA,GAAA,eAAA,CADF,CACE;AAEA;;AACA,SAAA,GAAA,GAAW,KAAA,eAAA,CAAX,MAAW,EAAX;AAEA,SAAA,QAAA,GAAgB,KAAA,eAAA,CAAhB,WAAgB,EAAhB;AAEA,SAAA,cAAA,GAAsB,KAAA,eAAA,CAAtB,qBAAsB,EAAtB;AAEA,SAAA,aAAA,GAAqB,KAAA,eAAA,CAArB,gBAAqB,EAArB;AAEA,SAAA,OAAA,GAAA,EAAA;AAEA,SAAA,MAAA,GAAA,SAAA;AAEA,SAAA,MAAA,GAAA,IAAA;AAEA,SAAA,WAAA,GAAmB,IAAA,WAAA,CAAA,IAAA,EAAsB,KAAA,eAAA,CAAzC,SAAyC,EAAtB,CAAnB;AACD;;AA9BH,MAAA,MAAA,GAAA,OAAA,CAAA,SAAA;;AAAA,EAAA,MAAA,CAAA,OAAA,GAgCEC,SAAAA,OAAAA,GAAAA;AACE,WAAO,KAAA,OAAA,CAAP,MAAA;AAjCJ,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GAoCEC,SAAAA,UAAAA,GAAAA;AACE,WAAO,KAAP,OAAA;AArCJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GAwCEC,SAAAA,SAAAA,GAAAA;AACE,WAAO,KAAP,MAAA;AAzCJ,GAAA;;AAAA,EAAA,MAAA,CAAA,MAAA,GA4CEC,SAAAA,MAAAA,GAAAA;AACE,WAAO,KAAP,GAAA;AA7CJ,GAAA;;AAAA,EAAA,MAAA,CAAA,YAAA,GAgDEC,SAAAA,YAAAA,GAAAA;AACE,WAAO,KAAP,eAAA;AAjDJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GAoDEC,SAAAA,SAAAA,GAAAA;AACE,QAAM7B,MAAM,GAAG,IAAIP,MAAM,CAANA,IAAAA,CAAJ,YAAA,CAA6B,KAA7B,MAAA,EAA0C,KAAzD,MAAe,CAAf;AAEA,QAAMqC,OAAO,GAAG,KAAhB,UAAgB,EAAhB;;AAEA,SAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,OAAO,CAA3B,MAAA,EAAoCC,CAApC,EAAA,EAAyC;AACvC,UAAMC,QAAQ,GAAGF,OAAO,CAAPA,CAAO,CAAPA,CAAjB,WAAiBA,EAAjB;;AAEA,UAAA,QAAA,EAAc;AACZ9B,QAAAA,MAAM,CAANA,MAAAA,CAAAA,QAAAA;AACD;AACF;;AAED,WAAA,MAAA;AAjEJ,GAAA;;AAAA,EAAA,MAAA,CAAA,MAAA,GAoEEiC,SAAAA,MAAAA,GAAAA;AACE;AACA;AACA,SAAA,WAAA,CAAA,MAAA,CAAA,IAAA;AAEA,SAAA,OAAA,GAAA,EAAA;AAEA,WAAO,KAAP,OAAA;AA3EJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GA8EEC,SAAAA,SAAAA,CAAAA,MAAAA,EAAAA;AACE,QAAI,KAAA,oBAAA,CAAJ,MAAI,CAAJ,EAAuC;AACrC,aAAA,KAAA;AACD;;AAED,QAAI,CAAC,KAAL,MAAA,EAAkB;AAChB,UAAMF,QAAQ,GAAGG,MAAM,CAAvB,WAAiBA,EAAjB;;AAEA,UAAA,QAAA,EAAc;AACZ,aAAA,MAAA,GAAA,QAAA;AAEA,aAAA,eAAA;AACD;AAPH,KAAA,MAQO;AACL,UAAI,KAAJ,aAAA,EAAwB;AACtB,YAAMH,SAAQ,GAAGG,MAAM,CAAvB,WAAiBA,EAAjB;;AAEA,YAAA,SAAA,EAAc;AACZ,cAAMC,MAAM,GAAG,KAAA,OAAA,CAAA,MAAA,GAAf,CAAA;AAEA,eAAA,MAAA,GAAc,IAAI3C,MAAM,CAANA,IAAAA,CAAJ,MAAA,CACZ,CAAC,KAAA,MAAA,CAAA,GAAA,MAAqB2C,MAAM,GAA3B,CAAA,IAAmCJ,SAAQ,CAA5C,GAAoCA,EAApC,IADY,MAAA,EAEZ,CAAC,KAAA,MAAA,CAAA,GAAA,MAAqBI,MAAM,GAA3B,CAAA,IAAmCJ,SAAQ,CAA5C,GAAoCA,EAApC,IAFF,MAAc,CAAd;AAKA,eAAA,eAAA;AACD;AACF;AACF;;AAEDG,IAAAA,MAAM,CAANA,OAAAA,GAAAA,IAAAA;AAEA,SAAA,OAAA,CAAA,IAAA,CAAA,MAAA;AAEA,QAAME,MAAM,GAAG,KAAA,OAAA,CAAf,MAAA;AAEA,QAAMtC,OAAO,GAAG,KAAA,eAAA,CAAhB,UAAgB,EAAhB;;AAEA,QAAIA,OAAO,KAAPA,IAAAA,IAAoB,KAAA,GAAA,CAAA,OAAA,KAAxB,OAAA,EAAsD;AACpD;AACA,UAAIoC,MAAM,CAANA,MAAAA,OAAoB,KAAxB,GAAA,EAAkC;AAChCA,QAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,GAAAA;AACD;AAJH,KAAA,MAKO,IAAIE,MAAM,GAAG,KAAb,cAAA,EAAkC;AACvC;AACA,UAAIF,MAAM,CAANA,MAAAA,OAAoB,KAAxB,GAAA,EAAkC;AAChCA,QAAAA,MAAM,CAANA,MAAAA,CAAc,KAAdA,GAAAA;AACD;AAJI,KAAA,MAKA,IAAIE,MAAM,KAAK,KAAf,cAAA,EAAoC;AACzC;AACA,WAAK,IAAIN,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,MAAA,EAA4BA,CAA5B,EAAA,EAAiC;AAC/B,aAAA,OAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA;AACD;AAJI,KAAA,MAKA;AACLI,MAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA;AACD;;AAED,SAAA,UAAA;AAEA,WAAA,IAAA;AAzIJ,GAAA;;AAAA,EAAA,MAAA,CAAA,uBAAA,GA4IEG,SAAAA,uBAAAA,CAAAA,MAAAA,EAAAA;AACE,QAAI,KAAA,MAAA,KAAJ,IAAA,EAA0B;AACxB,UAAMN,QAAQ,GAAGG,MAAM,CAAvB,WAAiBA,EAAjB;;AAEA,UAAA,QAAA,EAAc;AACZ,eAAO,KAAA,MAAA,CAAA,QAAA,CAAP,QAAO,CAAP;AACD;AACF;;AAED,WAAA,KAAA;AArJJ,GAAA;;AAAA,EAAA,MAAA,CAAA,eAAA,GAwJEI,SAAAA,eAAAA,GAAAA;AACE,SAAA,MAAA,GAAc,KAAA,eAAA,CAAA,iBAAA,CACZ,IAAI9C,MAAM,CAANA,IAAAA,CAAJ,YAAA,CAA6B,KAA7B,MAAA,EAA0C,KAD5C,MACE,CADY,CAAd;AAzJJ,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GA8JE+C,SAAAA,UAAAA,GAAAA;AACE,QAAMH,MAAM,GAAG,KAAA,OAAA,CAAf,MAAA;AAEA,QAAMtC,OAAO,GAAG,KAAA,eAAA,CAAhB,UAAgB,EAAhB;;AAEA,QAAIA,OAAO,KAAPA,IAAAA,IAAoB,KAAA,GAAA,CAAA,OAAA,KAAxB,OAAA,EAAsD;AACpD,WAAA,WAAA,CAAA,IAAA;AAEA;AACD;;AAED,QAAIsC,MAAM,GAAG,KAAb,cAAA,EAAkC;AAChC;AACA,WAAA,WAAA,CAAA,IAAA;AAEA;AACD;;AAED,QAAI,KAAJ,MAAA,EAAiB;AACf,WAAA,WAAA,CAAA,SAAA,CAA2B,KAA3B,MAAA;AACD;;AAED,SAAA,WAAA,CAAA,QAAA,CACE,KAAA,eAAA,CAAA,aAAA,GAAqC,KAArC,OAAA,EAAmD,KAAA,eAAA,CAAA,SAAA,GADrD,MACE,CADF;AAIA,SAAA,WAAA,CAAA,IAAA;AAxLJ,GAAA;;AAAA,EAAA,MAAA,CAAA,oBAAA,GA2LEI,SAAAA,oBAAAA,CAAAA,MAAAA,EAAAA;AACE,QAAI,KAAA,OAAA,CAAJ,OAAA,EAA0B;AACxB,aAAO,KAAA,OAAA,CAAA,QAAA,CAAP,MAAO,CAAP;AADF,KAAA,MAEO;AACL,WAAK,IAAIV,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,OAAA,CAApB,MAAA,EAAyCA,CAAzC,EAAA,EAA8C;AAC5C,YAAII,MAAM,KAAK,KAAA,OAAA,CAAf,CAAe,CAAf,EAAgC;AAC9B,iBAAA,IAAA;AACD;AACF;AACF;;AAED,WAAA,KAAA;AAtMJ,GAAA;;AAAA,SAAA,OAAA;AAAA,CAAA,E;ACRA;;;AAYA,IAAMO,UAAU,GAAG,SAAA,UAAA,CAAA,OAAA,EAAA,SAAA,EAAA;AAIjB,MAAIC,KAAK,GAAT,CAAA;AAEA,MAAMC,KAAK,GAAX,EAAA;AAEA,MAAMC,KAAK,GAAGf,OAAO,CAAPA,MAAAA,CAAd,QAAcA,EAAd;AAEA,MAAIgB,EAAE,GAAN,KAAA;;AAEA,SAAOA,EAAE,KAAT,CAAA,EAAiB;AACf;AACA;AACAA,IAAAA,EAAE,GAAGjC,QAAQ,CAAA,EAAA,EAARA,EAAQ,CAARA,GAALiC,EAAAA;AAEAH,IAAAA,KAAK;AACN;;AAEDA,EAAAA,KAAK,GAAGzB,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAARyB,SAAQzB,CAARyB;AAEA,SAAO;AACLI,IAAAA,IAAI,EADC,KAAA;AAELJ,IAAAA,KAAK,EAFA,KAAA;AAGLC,IAAAA,KAAK,EAAEA;AAHF,GAAP;AAtBF,CAAA;;AA6BA,IAAMI,UAAU,GAAhB,IAAA;AAEA,IAAMC,aAAa,GAAnB,GAAA;AAEA,IAAMC,UAAU,GAAhB,wFAAA;AAGA,IAAMC,eAAe,GAArB,KAAA;AAEA,IAAMC,WAAW,GAAG,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAApB,EAAoB,CAApB;AAEA,IAAMC,eAAe,GAArB,SAAA;;AAEA,IAAaC,SAAb,GAAA,aAAA,YAAA;AAwBE,WAAA,SAAA,CAAA,GAAA,EAAA,UAAA,EAAA,UAAA,EAAA;QAEEC,UAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,MAAAA,UAAAA,GAA+B,EAA/BA;;;QACAC,UAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,MAAAA,UAAAA,GAA+B,EAA/BA;;;AAEA,SAAA,MAAA,CAAA,SAAA,EAAuB/D,MAAM,CAANA,IAAAA,CAAvB,WAAA;AAEA,SAAA,OAAA,GAAA,EAAA;AACA,SAAA,QAAA,GAAA,EAAA;AACA,SAAA,SAAA,GAAA,EAAA;AACA,SAAA,SAAA,GAAA,IAAA;AACA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,QAAA,GAAgB+D,UAAU,CAAVA,QAAAA,IAAhB,EAAA;AACA,SAAA,cAAA,GAAsBA,UAAU,CAAVA,kBAAAA,IAAtB,CAAA;AACA,SAAA,OAAA,GAAeA,UAAU,CAAVA,OAAAA,IAAf,IAAA;AACA,SAAA,MAAA,GAAcA,UAAU,CAAVA,MAAAA,IAAd,EAAA;AAEA,SAAA,KAAA,GAAaA,UAAU,CAAVA,KAAAA,IAAb,EAAA;AAEA,SAAA,WAAA,GAAA,IAAA;;AAEA,QAAIA,UAAU,CAAVA,WAAAA,KAAJ,SAAA,EAA0C;AACxC,WAAA,WAAA,GAAmBA,UAAU,CAA7B,WAAA;AACD;;AAED,SAAA,aAAA,GAAA,KAAA;;AAEA,QAAIA,UAAU,CAAVA,aAAAA,KAAJ,SAAA,EAA4C;AAC1C,WAAA,aAAA,GAAqBA,UAAU,CAA/B,aAAA;AACD;;AAED,SAAA,YAAA,GAAA,KAAA;;AAEA,QAAIA,UAAU,CAAVA,YAAAA,KAAJ,SAAA,EAA2C;AACzC,WAAA,YAAA,GAAoBA,UAAU,CAA9B,YAAA;AACD;;AAED,SAAA,iBAAA,GAAA,KAAA;;AAEA,QAAIA,UAAU,CAAVA,iBAAAA,KAAJ,SAAA,EAAgD;AAC9C,WAAA,iBAAA,GAAyBA,UAAU,CAAnC,iBAAA;AACD;;AACD,SAAA,SAAA,GAAiBA,UAAU,CAAVA,SAAAA,IAAjB,UAAA;AAEA,SAAA,cAAA,GAAsBA,UAAU,CAAVA,cAAAA,IAAtB,eAAA;AAEA,SAAA,UAAA,GAAkBA,UAAU,CAAVA,UAAAA,IAAlB,WAAA;AAEA,SAAA,UAAA,GAAkBA,UAAU,CAAVA,UAAAA,IAAlB,UAAA;AAEA,SAAA,SAAA,GAAiBA,UAAU,CAAVA,SAAAA,IAAjB,UAAA;AAEA,SAAA,WAAA,GAAmBA,UAAU,CAAVA,WAAAA,IAAnB,aAAA;AAEA,SAAA,YAAA,GAAoBA,UAAU,CAAVA,YAAAA,IAApB,eAAA;;AAEA,QAAIC,SAAS,CAATA,SAAAA,CAAAA,WAAAA,GAAAA,OAAAA,CAAAA,MAAAA,MAAsD,CAA1D,CAAA,EAA8D;AAC5D;AACA,WAAA,SAAA,GAAiB,KAAjB,WAAA;AACD;;AAED,SAAA,cAAA,GAAA,IAAA;AAEA,SAAA,WAAA;AAEA,SAAA,UAAA,CAAA,UAAA,EAAA,IAAA,EAjEF,CAiEE;AAEA;;AACA,SAAA,MAAA,CAAA,GAAA,EApEF,CAoEE;AACD;;AA7FH,MAAA,MAAA,GAAA,SAAA,CAAA,SAAA;;AAAA,EAAA,MAAA,CAAA,KAAA,GA+FE/D,SAAAA,KAAAA,GAAAA;qBAAAA,CACE;AACA;;;AACA,SAAA,SAAA,GAAiB,KAAjB,MAAiB,EAAjB;AAEA,SAAA,KAAA,GAAA,IAAA;AAEA,SAAA,OAAA,GAPFA,CAOE;;AAGA,SAAA,SAAA,GAAiB,CACf,MAAM,CAAN,IAAA,CAAA,KAAA,CAAA,WAAA,EAAA;AAEE;AACA,SAHF,MAGE,EAHF,EAAA,cAAA,EAAA;AAME,gBAAA;AACE,MAAA,KAAI,CAAJ,aAAA,CAAA,KAAA,EADF,CACE;AAEA;AACA;AACA;AACA;;;AACA,WAAA;AAEE;AACA,MAAA,KAAI,CAAJ,MAAA,GAAA,OAAA,QAA6B,KAAI,CAAJ,GAAA,CAAA,SAAA,KAA7B,CAAA,KAAA;AAEA;AACA,MAAA,KAAI,CAAJ,MAAA,GAAA,OAAA,OAA4B,KAAI,CAAJ,GAAA,CAN9B,SAM8B,CAN9B,EAOE;AACAD,QAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAAAA,MAAAA;AACD;AAvBU,KACf,CADe,EA0Bf,MAAM,CAAN,IAAA,CAAA,KAAA,CAAA,WAAA,EAAA;AAEE;AACA,SAHF,MAGE,EAHF,EAAA,MAAA,EAAA;AAME,gBAAA;AACE,MAAA,KAAI,CAAJ,MAAA;AAjCN,KA0BE,CA1Be,CAAjB;AAzGJ,GAAA,CAAA;AAAA;;AAAA,EAAA,MAAA,CAAA,QAAA,GAiJEU,SAAAA,QAAAA,GAAAA;AACE;AACA,SAAK,IAAI4B,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,OAAA,CAApB,MAAA,EAAyCA,CAAzC,EAAA,EAA8C;AAC5C,UAAI,KAAA,OAAA,CAAA,CAAA,EAAA,MAAA,OAA6B,KAAjC,SAAA,EAAiD;AAC/C,aAAA,OAAA,CAAA,CAAA,EAAA,MAAA,CAAuB,KAAvB,SAAA;AACD;AACF,KANH5B,CAMG;;;AAGD,SAAK,IAAI4B,EAAC,GAAV,CAAA,EAAgBA,EAAC,GAAG,KAAA,QAAA,CAApB,MAAA,EAA0CA,EAA1C,EAAA,EAA+C;AAC7C,WAAA,QAAA,CAAA,EAAA,EAAA,MAAA;AACD;;AAED,SAAA,QAAA,GAAA,EAAA,CAbF5B,CAaE;;AAGA,SAAK,IAAI4B,GAAC,GAAV,CAAA,EAAgBA,GAAC,GAAG,KAAA,SAAA,CAApB,MAAA,EAA2CA,GAA3C,EAAA,EAAgD;AAC9CtC,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,cAAAA,CAAiC,KAAA,SAAA,CAAjCA,GAAiC,CAAjCA;AACD;;AAED,SAAA,SAAA,GAAA,EAAA;AAEA,SAAA,SAAA,GAAA,IAAA;AAEA,SAAA,KAAA,GAAA,KAAA;AAzKJ,GAAA,CAAA;AAAA;;AAAA,EAAA,MAAA,CAAA,IAAA,GA6KEW,SAAAA,IAAAA,GAAAA,CA7KF,CAAA;;AAAA,EAAA,MAAA,CAAA,WAAA,GA+KEsD,SAAAA,WAAAA,GAAAA;AACE,QAAI,KAAA,MAAA,CAAA,MAAA,GAAJ,CAAA,EAA4B;AAC1B;AACD;;AAED,SAAK,IAAI3B,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,UAAA,CAApB,MAAA,EAA4CA,CAA5C,EAAA,EAAiD;AAC/C,WAAA,MAAA,CAAA,IAAA,CAAiB;AACf4B,QAAAA,GAAG,EAAE,KAAA,SAAA,IAAkB5B,CAAC,GAAnB,CAAA,IAAA,GAAA,GAAiC,KADvB,cAAA;AAEf6B,QAAAA,MAAM,EAAE,KAAA,UAAA,CAFO,CAEP,CAFO;AAGfC,QAAAA,KAAK,EAAE,KAAA,UAAA,CAAA,CAAA;AAHQ,OAAjB;AAKD;AA1LL,GAAA;;AAAA,EAAA,MAAA,CAAA,eAAA,GA6LEC,SAAAA,eAAAA,GAAAA;AACE,QAAMhC,OAAO,GAAG,KAAhB,UAAgB,EAAhB;AAEA,QAAM9B,MAAM,GAAG,IAAIP,MAAM,CAANA,IAAAA,CAAnB,YAAe,EAAf;;AAEA,SAAK,IAAIsC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,OAAO,CAA3B,MAAA,EAAoCC,CAApC,EAAA,EAAyC;AACvC,UAAMC,QAAQ,GAAGF,OAAO,CAAPA,CAAO,CAAPA,CAAjB,WAAiBA,EAAjB;;AACA,UAAA,QAAA,EAAc;AACZ9B,QAAAA,MAAM,CAANA,MAAAA,CAAAA,QAAAA;AACD;AACF,KAVH8D,CAUG;AAGD;;;AACA,SAAA,MAAA,GAAA,SAAA,CAAA,MAAA;AA3MJ,GAAA;;AAAA,EAAA,MAAA,CAAA,WAAA,GA8MEC,SAAAA,WAAAA,GAAAA;AACE,WAAO,KAAP,QAAA;AA/MJ,GAAA;;AAAA,EAAA,MAAA,CAAA,WAAA,GAkNEC,SAAAA,WAAAA,CAAAA,QAAAA,EAAAA;AACE,SAAA,QAAA,GAAA,QAAA;AAnNJ,GAAA;;AAAA,EAAA,MAAA,CAAA,qBAAA,GAsNEC,SAAAA,qBAAAA,GAAAA;AACE,WAAO,KAAP,cAAA;AAvNJ,GAAA;;AAAA,EAAA,MAAA,CAAA,qBAAA,GA0NEC,SAAAA,qBAAAA,CAAAA,kBAAAA,EAAAA;AACE,SAAA,cAAA,GAAA,kBAAA;AA3NJ,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GA8NEC,SAAAA,UAAAA,GAAAA;AACE,WAAO,KAAP,OAAA;AA/NJ,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GAkOEC,SAAAA,UAAAA,CAAAA,OAAAA,EAAAA;AACE,SAAA,OAAA,GAAA,OAAA;AAnOJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GAsOEC,SAAAA,SAAAA,GAAAA;AACE,WAAO,KAAP,MAAA;AAvOJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GA0OEC,SAAAA,SAAAA,CAAAA,MAAAA,EAAAA;AACE,SAAA,MAAA,GAAA,MAAA;AA3OJ,GAAA;;AAAA,EAAA,MAAA,CAAA,QAAA,GA8OEC,SAAAA,QAAAA,GAAAA;AACE,WAAO,KAAP,KAAA;AA/OJ,GAAA;;AAAA,EAAA,MAAA,CAAA,QAAA,GAkPEC,SAAAA,QAAAA,CAAAA,KAAAA,EAAAA;AACE,SAAA,KAAA,GAAA,KAAA;AAnPJ,GAAA;;AAAA,EAAA,MAAA,CAAA,cAAA,GAsPEC,SAAAA,cAAAA,GAAAA;AACE,WAAO,KAAP,WAAA;AAvPJ,GAAA;;AAAA,EAAA,MAAA,CAAA,cAAA,GA0PEC,SAAAA,cAAAA,CAAAA,WAAAA,EAAAA;AACE,SAAA,WAAA,GAAA,WAAA;AA3PJ,GAAA;;AAAA,EAAA,MAAA,CAAA,gBAAA,GA8PEC,SAAAA,gBAAAA,GAAAA;AACE,WAAO,KAAP,aAAA;AA/PJ,GAAA;;AAAA,EAAA,MAAA,CAAA,gBAAA,GAkQEC,SAAAA,gBAAAA,CAAAA,aAAAA,EAAAA;AACE,SAAA,aAAA,GAAA,aAAA;AAnQJ,GAAA;;AAAA,EAAA,MAAA,CAAA,eAAA,GAsQEC,SAAAA,eAAAA,GAAAA;AACE,WAAO,KAAP,YAAA;AAvQJ,GAAA;;AAAA,EAAA,MAAA,CAAA,eAAA,GA0QEC,SAAAA,eAAAA,CAAAA,YAAAA,EAAAA;AACE,SAAA,YAAA,GAAA,YAAA;AA3QJ,GAAA;;AAAA,EAAA,MAAA,CAAA,oBAAA,GA8QEC,SAAAA,oBAAAA,GAAAA;AACE,WAAO,KAAP,iBAAA;AA/QJ,GAAA;;AAAA,EAAA,MAAA,CAAA,oBAAA,GAkREC,SAAAA,oBAAAA,CAAAA,iBAAAA,EAAAA;AACE,SAAA,iBAAA,GAAA,iBAAA;AAnRJ,GAAA;;AAAA,EAAA,MAAA,CAAA,iBAAA,GAsREC,SAAAA,iBAAAA,GAAAA;AACE,WAAO,KAAP,cAAA;AAvRJ,GAAA;;AAAA,EAAA,MAAA,CAAA,iBAAA,GA0REC,SAAAA,iBAAAA,CAAAA,cAAAA,EAAAA;AACE,SAAA,cAAA,GAAA,cAAA;AA3RJ,GAAA;;AAAA,EAAA,MAAA,CAAA,YAAA,GA8REC,SAAAA,YAAAA,GAAAA;AACE,WAAO,KAAP,SAAA;AA/RJ,GAAA;;AAAA,EAAA,MAAA,CAAA,YAAA,GAkSEC,SAAAA,YAAAA,CAAAA,SAAAA,EAAAA;AACE,SAAA,SAAA,GAAA,SAAA;AAnSJ,GAAA;;AAAA,EAAA,MAAA,CAAA,aAAA,GAsSEC,SAAAA,aAAAA,GAAAA;AACE,WAAO,KAAP,UAAA;AAvSJ,GAAA;;AAAA,EAAA,MAAA,CAAA,aAAA,GA0SEC,SAAAA,aAAAA,CAAAA,UAAAA,EAAAA;AACE,SAAA,UAAA,GAAA,UAAA;AA3SJ,GAAA;;AAAA,EAAA,MAAA,CAAA,aAAA,GA8SEC,SAAAA,aAAAA,GAAAA;AACE,WAAO,KAAP,UAAA;AA/SJ,GAAA;;AAAA,EAAA,MAAA,CAAA,aAAA,GAkTEC,SAAAA,aAAAA,CAAAA,UAAAA,EAAAA;AACE,SAAA,UAAA,GAAA,UAAA;AAnTJ,GAAA;;AAAA,EAAA,MAAA,CAAA,cAAA,GAsTEC,SAAAA,cAAAA,GAAAA;AACE,WAAO,KAAP,WAAA;AAvTJ,GAAA;;AAAA,EAAA,MAAA,CAAA,cAAA,GA0TEC,SAAAA,cAAAA,CAAAA,WAAAA,EAAAA;AACE,SAAA,WAAA,GAAA,WAAA;AA3TJ,GAAA;;AAAA,EAAA,MAAA,CAAA,eAAA,GA8TEC,SAAAA,eAAAA,GAAAA;AACE,WAAO,KAAP,YAAA;AA/TJ,GAAA;;AAAA,EAAA,MAAA,CAAA,eAAA,GAkUEC,SAAAA,eAAAA,CAAAA,YAAAA,EAAAA;AACE,SAAA,YAAA,GAAA,YAAA;AAnUJ,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GAsUEnE,SAAAA,UAAAA,GAAAA;AACE,WAAO,KAAP,OAAA;AAvUJ,GAAA;;AAAA,EAAA,MAAA,CAAA,eAAA,GA0UEoE,SAAAA,eAAAA,GAAAA;AACE,WAAO,KAAA,OAAA,CAAP,MAAA;AA3UJ,GAAA;;AAAA,EAAA,MAAA,CAAA,WAAA,GA8UEC,SAAAA,WAAAA,GAAAA;AACE,WAAO,KAAP,QAAA;AA/UJ,GAAA;;AAAA,EAAA,MAAA,CAAA,gBAAA,GAkVEC,SAAAA,gBAAAA,GAAAA;AACE,WAAO,KAAA,QAAA,CAAP,MAAA;AAnVJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GAsVE7D,SAAAA,SAAAA,CAAAA,MAAAA,EAAAA,SAAAA,EAAAA;AACE,SAAA,YAAA,CAAA,MAAA;;AAEA,QAAI,CAAJ,SAAA,EAAgB;AACd,WAAA,MAAA;AACD;AA3VL,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GA8VE8D,SAAAA,UAAAA,CAAAA,OAAAA,EAAAA,SAAAA,EAAAA;AACE,SAAK,IAAL,GAAA,IAAA,OAAA,EAA2B;AACzB,UAAIlE,OAAO,CAAPA,cAAAA,CAAJ,GAAIA,CAAJ,EAAiC;AAC/B,aAAA,YAAA,CAAkBA,OAAO,CAAzB,GAAyB,CAAzB;AACD;AACF;;AAED,QAAI,CAAJ,SAAA,EAAgB;AACd,WAAA,MAAA;AACD;AAvWL,GAAA;;AAAA,EAAA,MAAA,CAAA,YAAA,GA0WEmE,SAAAA,YAAAA,CAAAA,MAAAA,EAAAA;sBAAAA,CACE;;;AACA,QAAI9D,MAAM,CAAV,YAAIA,EAAJ,EAA2B;AACzB;AACA1C,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,WAAAA,CAAAA,MAAAA,EAAAA,SAAAA,EAAiD,YAAA;AAC/C,YAAI,MAAI,CAAR,KAAA,EAAgB;AACd0C,UAAAA,MAAM,CAANA,OAAAA,GAAAA,KAAAA;;AAEA,UAAA,MAAI,CAAJ,OAAA;AACD;AALH1C,OAAAA;AAOD;;AAED0C,IAAAA,MAAM,CAANA,OAAAA,GAAAA,KAAAA;AAEA,SAAA,OAAA,CAAA,IAAA,CAAA,MAAA;AAzXJ,GAAA;;AAAA,EAAA,MAAA,CAAA,aAAA,GA4XE+D,SAAAA,aAAAA,CAAAA,MAAAA,EAAAA;AACE,QAAIvD,KAAK,GAAG,CAAZ,CAAA;;AAEA,QAAI,KAAA,OAAA,CAAJ,OAAA,EAA0B;AACxBA,MAAAA,KAAK,GAAG,KAAA,OAAA,CAAA,OAAA,CAARA,MAAQ,CAARA;AADF,KAAA,MAEO;AACL,WAAK,IAAIZ,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,OAAA,CAApB,MAAA,EAAyCA,CAAzC,EAAA,EAA8C;AAC5C,YAAII,MAAM,KAAK,KAAA,OAAA,CAAf,CAAe,CAAf,EAAgC;AAC9BQ,UAAAA,KAAK,GAALA,CAAAA;AAEA;AACD;AACF;AACF;;AAED,QAAIA,KAAK,KAAK,CAAd,CAAA,EAAkB;AAChB;AACA,aAAA,KAAA;AACD;;AAEDR,IAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA;AAEA,SAAA,OAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,EAtBF+D,CAsBE;;AAEA,WAAA,IAAA;AApZJ,GAAA;;AAAA,EAAA,MAAA,CAAA,YAAA,GAuZEC,SAAAA,YAAAA,CAAAA,MAAAA,EAAAA,SAAAA,EAAAA;AACE,QAAMC,OAAO,GAAG,KAAA,aAAA,CAAhB,MAAgB,CAAhB;;AAEA,QAAI,CAAA,SAAA,IAAJ,OAAA,EAA2B;AACzB,WAAA,OAAA;AACD;;AAED,WAAA,OAAA;AA9ZJ,GAAA;;AAAA,EAAA,MAAA,CAAA,aAAA,GAiaEC,SAAAA,aAAAA,CAAAA,OAAAA,EAAAA,SAAAA,EAAAA;AACE,QAAID,OAAO,GAAX,KAAA;;AAEA,SAAK,IAAIrE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,OAAO,CAA3B,MAAA,EAAoCC,CAApC,EAAA,EAAyC;AACvCqE,MAAAA,OAAO,GAAGA,OAAO,IAAI,KAAA,aAAA,CAAmBtE,OAAO,CAA/CsE,CAA+C,CAA1B,CAArBA;AACD;;AAED,QAAI,CAAA,SAAA,IAAJ,OAAA,EAA2B;AACzB,WAAA,OAAA;AACD;;AAED,WAAA,OAAA;AA5aJ,GAAA;;AAAA,EAAA,MAAA,CAAA,YAAA,GA+aEE,SAAAA,YAAAA,GAAAA;AACE,SAAA,aAAA,CAAA,IAAA;AAEA,SAAA,OAAA,GAAA,EAAA;AAlbJ,GAAA;;AAAA,EAAA,MAAA,CAAA,OAAA,GAqbEC,SAAAA,OAAAA,GAAAA;AACE,QAAMC,WAAW,GAAG,KAAA,QAAA,CAApB,KAAoB,EAApB;AAEA,SAAA,QAAA,GAAA,EAAA;AAEA,SAAA,aAAA,CAAA,KAAA;AAEA,SAAA,MAAA,GAPFD,CAOE;AAGA;;AACAtG,IAAAA,UAAU,CAAC,SAAA,OAAA,GAAA;AACT,WAAK,IAAI8B,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGyE,WAAW,CAA/B,MAAA,EAAwCzE,CAAxC,EAAA,EAA6C;AAC3CyE,QAAAA,WAAW,CAAXA,CAAW,CAAXA,CAAAA,MAAAA;AACD;AAHO,KAAA,EAAVvG,CAAU,CAAVA;AAhcJ,GAAA;;AAAA,EAAA,MAAA,CAAA,iBAAA,GAucEwG,SAAAA,iBAAAA,CAAAA,MAAAA,EAAAA;AACE;AACA;AACA,QAAMC,UAAU,GAAG,KAAnB,aAAmB,EAAnB,CAHFD,CAGE;;AAEA,QAAME,KAAK,GAAGD,UAAU,CAAVA,oBAAAA,EAAAA;AAEZ,QAAIjH,MAAM,CAANA,IAAAA,CAAJ,MAAA,CAAuBO,MAAM,CAANA,YAAAA,GAAvB,GAAuBA,EAAvB,EAAoDA,MAAM,CAANA,YAAAA,GAFtD,GAEsDA,EAApD,CAFY0G,CAAd;AAKAC,IAAAA,KAAK,CAALA,CAAAA,IAAW,KAAXA,QAAAA;AACAA,IAAAA,KAAK,CAALA,CAAAA,IAAW,KAAXA,QAAAA;AAEA,QAAMC,KAAK,GAAGF,UAAU,CAAVA,oBAAAA,EAAAA;AAEZ,QAAIjH,MAAM,CAANA,IAAAA,CAAJ,MAAA,CAAuBO,MAAM,CAANA,YAAAA,GAAvB,GAAuBA,EAAvB,EAAoDA,MAAM,CAANA,YAAAA,GAFtD,GAEsDA,EAApD,CAFY0G,CAAd;AAKAE,IAAAA,KAAK,CAALA,CAAAA,IAAW,KAAXA,QAAAA;AACAA,IAAAA,KAAK,CAALA,CAAAA,IAAW,KAAXA,QAAAA,CAnBFH,CAmBEG;;AAGA5G,IAAAA,MAAM,CAANA,MAAAA,EAAAA;AAEE0G,IAAAA,UAAU,CAAVA,oBAAAA,CAFF1G,KAEE0G,CAFF1G;AAKAA,IAAAA,MAAM,CAANA,MAAAA,EAAAA;AAEE0G,IAAAA,UAAU,CAAVA,oBAAAA,CAFF1G,KAEE0G,CAFF1G;AAKA,WAAA,MAAA;AAveJ,GAAA;;AAAA,EAAA,MAAA,CAAA,MAAA,GA0eE6G,SAAAA,MAAAA,GAAAA;AACE;AACA,SAAA,cAAA,CAAA,CAAA;AA5eJ,GAAA;;AAAA,EAAA,MAAA,CAAA,aAAA,GA+eEC,SAAAA,aAAAA,CAAAA,OAAAA,EAAAA;AACE;AACA,SAAK,IAAI/E,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,QAAA,CAApB,MAAA,EAA0CA,CAA1C,EAAA,EAA+C;AAC7C,WAAA,QAAA,CAAA,CAAA,EAAA,MAAA;AACD;;AAED,SAAA,QAAA,GAAA,EAAA,CANF+E,CAME;;AAGA,SAAK,IAAI/E,GAAC,GAAV,CAAA,EAAgBA,GAAC,GAAG,KAAA,OAAA,CAApB,MAAA,EAAyCA,GAAzC,EAAA,EAA8C;AAC5C,UAAMI,MAAM,GAAG,KAAA,OAAA,CAAf,GAAe,CAAf;AAEAA,MAAAA,MAAM,CAANA,OAAAA,GAAAA,KAAAA;;AAEA,UAAA,OAAA,EAAa;AACXA,QAAAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA;AACD;AACF;AAhgBL,GAAA;;AAAA,EAAA,MAAA,CAAA,qBAAA,GAmgBE4E,SAAAA,qBAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA;AACE,QAAMC,CAAC,GAAP,IAAA,CADFD,CACE;;AAEA,QAAME,IAAI,GAAI,CAACC,EAAE,CAAFA,GAAAA,KAAWC,EAAE,CAAd,GAAYA,EAAZ,IAAwBjG,IAAI,CAA7B,EAAC,GAAd,GAAA;AACA,QAAMkG,IAAI,GAAI,CAACF,EAAE,CAAFA,GAAAA,KAAWC,EAAE,CAAd,GAAYA,EAAZ,IAAwBjG,IAAI,CAA7B,EAAC,GAAd,GAAA;AAEA,QAAMmG,CAAC,GACLnG,IAAI,CAAJA,GAAAA,CAAS+F,IAAI,GAAb/F,CAAAA,IAAqBA,IAAI,CAAJA,GAAAA,CAAS+F,IAAI,GAAlC/F,CAAqBA,CAArBA,GACAA,IAAI,CAAJA,GAAAA,CAAUiG,EAAE,CAAFA,GAAAA,KAAWjG,IAAI,CAAhB,EAACiG,GAAVjG,GAAAA,IACEA,IAAI,CAAJA,GAAAA,CAAUgG,EAAE,CAAFA,GAAAA,KAAWhG,IAAI,CAAhB,EAACgG,GADZhG,GACEA,CADFA,GAEEA,IAAI,CAAJA,GAAAA,CAASkG,IAAI,GAFflG,CAEEA,CAFFA,GAGEA,IAAI,CAAJA,GAAAA,CAASkG,IAAI,GALjB,CAKIlG,CALJ;AAOA,WAAO8F,CAAC,IAAI,IAAI9F,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,IAAAA,CAAXA,CAAWA,CAAXA,EAAyBA,IAAI,CAAJA,IAAAA,CAAU,IAAnD,CAAyCA,CAAzBA,CAAR,CAAR;AAhhBJ,GAAA;;AAAA,EAAA,MAAA,CAAA,gBAAA,GAmhBEoG,SAAAA,gBAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA;AACE,QAAMtF,QAAQ,GAAGG,MAAM,CAAvB,WAAiBA,EAAjB;;AAEA,QAAA,QAAA,EAAc;AACZ,aAAOnC,MAAM,CAANA,QAAAA,CAAP,QAAOA,CAAP;AACD;;AAED,WAAA,KAAA;AA1hBJ,GAAA;;AAAA,EAAA,MAAA,CAAA,mBAAA,GA6hBEuH,SAAAA,mBAAAA,CAAAA,MAAAA,EAAAA;AACE,QAAA,OAAA;AAEA,QAAIC,QAAQ,GAAZ,KAAA,CAHFD,CAGE;;AAEA,QAAIE,cAAc,GAAlB,IAAA;;AAEA,SAAK,IAAI1F,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAAA,QAAA,CAApB,MAAA,EAA0CA,CAA1C,EAAA,EAA+C;AAC7CvC,MAAAA,OAAO,GAAG,KAAA,QAAA,CAAVA,CAAU,CAAVA;AAEA,UAAMkI,MAAM,GAAGlI,OAAO,CAAtB,SAAeA,EAAf;AAEA,UAAMwC,QAAQ,GAAGG,MAAM,CAAvB,WAAiBA,EAAjB;;AAEA,UAAIuF,MAAM,IAAV,QAAA,EAAwB;AACtB,YAAMC,CAAC,GAAG,KAAA,qBAAA,CAAA,MAAA,EAAV,QAAU,CAAV;;AAEA,YAAIA,CAAC,GAAL,QAAA,EAAkB;AAChBH,UAAAA,QAAQ,GAARA,CAAAA;AAEAC,UAAAA,cAAc,GAAdA,OAAAA;AACD;AACF;AACF;;AAED,QAAIA,cAAc,IAAIA,cAAc,CAAdA,uBAAAA,CAAtB,MAAsBA,CAAtB,EAAsE;AACpEA,MAAAA,cAAc,CAAdA,SAAAA,CAAAA,MAAAA;AADF,KAAA,MAEO;AACLjI,MAAAA,OAAO,GAAG,IAAA,OAAA,CAAVA,IAAU,CAAVA;AAEAA,MAAAA,OAAO,CAAPA,SAAAA,CAAAA,MAAAA;AAEA,WAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACD;AA9jBL,GAAA;;AAAA,EAAA,MAAA,CAAA,cAAA,GAikBEoI,SAAAA,cAAAA,CAAAA,MAAAA,EAAAA;;;AACE,QAAI,CAAC,KAAL,KAAA,EAAiB;AACf;AACD,KAHHA,CAGG;;;AAGD,QAAIC,MAAM,KAAV,CAAA,EAAkB;AAChB;;;;;;;AAOApI,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,EAAAA,iBAAAA,EAAAA,IAAAA;;AAEA,UAAI,KAAA,cAAA,KAAJ,IAAA,EAAkC;AAChCqI,QAAAA,MAAM,CAANA,YAAAA,CAAoB,KAApBA,cAAAA;AAEA,eAAO,KAAP,cAAA;AACD;AACF,KArBHF,CAqBG;AAGD;AACA;AACA;;;AACA,QAAMG,SAAS,GAAA;AAEf;AACE,SAAA,MAAA,GAAA,OAAA,KAAA,CAAA,GACI,IAAItI,MAAM,CAANA,IAAAA,CAAJ,YAAA,EAAA;AAEA;AACA,SAAA,MAAA,GAAA,SAAA,GAHA,YAGA,EAHA,EAAA;AAOA;AACA,SAAA,MAAA,GAAA,SAAA,GATJ,YASI,EARA,CADJ,GAaI,IAAIA,MAAM,CAANA,IAAAA,CAAJ,YAAA,CACA,IAAIA,MAAM,CAANA,IAAAA,CAAJ,MAAA,CAAA,iBAAA,EAA0C,CAD1C,eACA,CADA,EAEA,IAAIA,MAAM,CAANA,IAAAA,CAAJ,MAAA,CAAuB,CAAvB,iBAAA,EAlBN,eAkBM,CAFA,CAhBN;AAqBA,QAAMO,MAAM,GAAG,KAAA,iBAAA,CAAf,SAAe,CAAf;AAEA,QAAMgI,KAAK,GAAG9G,IAAI,CAAJA,GAAAA,CAAS2G,MAAM,GAAG,KAAlB3G,SAAAA,EAAkC,KAAA,OAAA,CAAhD,MAAcA,CAAd;;AAEA,SAAK,IAAIa,CAAC,GAAV,MAAA,EAAqBA,CAAC,GAAtB,KAAA,EAAgCA,CAAhC,EAAA,EAAqC;AACnC,UAAMI,MAAM,GAAG,KAAA,OAAA,CAAf,CAAe,CAAf;;AAEA,UAAI,CAACA,MAAM,CAAP,OAAA,IAAmB,KAAA,gBAAA,CAAA,MAAA,EAAvB,MAAuB,CAAvB,EAA8D;AAC5D,YAAI,CAAC,KAAD,YAAA,IAAuB,KAAA,YAAA,IAAqBA,MAAM,CAAtD,UAAgDA,EAAhD,EAAsE;AACpE,eAAA,mBAAA,CAAA,MAAA;AACD;AACF;AACF;;AAED,QAAI6F,KAAK,GAAG,KAAA,OAAA,CAAZ,MAAA,EAAiC;AAC/B,WAAA,cAAA,GAAsB,MAAM,CAAN,UAAA,EAAA;AAEpB,kBAAA;AACE,QAAA,MAAI,CAAJ,cAAA,CAAA,KAAA;AAHkB,OAAA,EAAtB,CAAsB,CAAtB;AADF,KAAA,MAQO;AACL,WAAA,cAAA,GAAA,IAAA;AAEA;;;;;;;;AAOAvI,MAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,EAAAA,eAAAA,EAAAA,IAAAA;AACD;AAlpBL,GAAA;;AAAA,EAAA,MAAA,CAAA,MAAA,GAqpBEwI,SAAAA,MAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA;AACE,WAAO,SAAA,WAAA,CAAA,MAAA,EAAA;AACL;AACA,WAAK,IAAL,QAAA,IAAuBC,MAAM,CAA7B,SAAA,EAAyC;AACvC;AACA;AACA,aAAA,SAAA,CAAA,QAAA,IAA2BA,MAAM,CAANA,SAAAA,CAA3B,QAA2BA,CAA3B;AACD,OANI,CAMJ;AAGD;;;AACA,aAAA,IAAA;AAVK,KAAA,CAAA,KAAA,CAAA,IAAA,EAWO,CAXd,IAWc,CAXP,CAAP;AAtpBJ,GAAA;;AAAA,SAAA,SAAA;AAAA,CAAA,EAAA","sourcesContent":["/* global google */\n/* eslint-disable filenames/match-regex */\nimport { Cluster } from './Cluster'\n\nimport { ClusterIconStyle, ClusterIconInfo } from './types'\n\nexport class ClusterIcon {\n  cluster: Cluster\n  className: string\n  styles: ClusterIconStyle[]\n  center: google.maps.LatLng | undefined\n  div: HTMLDivElement | null\n  sums: ClusterIconInfo | null\n  visible: boolean\n  url: string\n  height: number\n  width: number\n  anchorText: number[]\n  anchorIcon: number[]\n  textColor: string\n  textSize: number\n  textDecoration: string\n  fontWeight: string\n  fontStyle: string\n  fontFamily: string\n  backgroundPosition: string\n\n  boundsChangedListener: google.maps.MapsEventListener | null\n\n  constructor(cluster: Cluster, styles: ClusterIconStyle[]) {\n    cluster.getClusterer().extend(ClusterIcon, google.maps.OverlayView)\n    this.cluster = cluster\n    this.className = this.cluster.getClusterer().getClusterClass()\n    this.styles = styles\n    this.center = undefined\n    this.div = null\n    this.sums = null\n    this.visible = false\n    this.boundsChangedListener = null\n    this.url = ''\n    this.height = 0\n    this.width = 0\n    this.anchorText = [0, 0]\n    this.anchorIcon = [0, 0]\n    this.textColor = 'black'\n    this.textSize = 11\n    this.textDecoration = 'none'\n    this.fontWeight = 'bold'\n    this.fontStyle = 'normal'\n    this.fontFamily = 'Arial,sans-serif'\n    this.backgroundPosition = '0 0'\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.setMap(cluster.getMap()) // Note: this causes onAdd to be called\n  }\n\n  onAdd() {\n    let cMouseDownInCluster: boolean\n    let cDraggingMapByCluster: boolean\n\n    this.div = document.createElement('div')\n    this.div.className = this.className\n    if (this.visible) {\n      this.show()\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.getPanes().overlayMouseTarget.appendChild(this.div)\n\n    // Fix for Issue 157\n    this.boundsChangedListener = google.maps.event.addListener(\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      this.getMap(),\n      'boundschanged',\n      function boundsChanged() {\n        cDraggingMapByCluster = cMouseDownInCluster\n      }\n    )\n\n    google.maps.event.addDomListener(this.div, 'mousedown', function onMouseDown() {\n      cMouseDownInCluster = true\n      cDraggingMapByCluster = false\n    })\n\n    // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n    google.maps.event.addDomListener(\n      this.div,\n      'click',\n      // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n      (event: Event) => {\n        cMouseDownInCluster = false\n\n        if (!cDraggingMapByCluster) {\n          const markerClusterer = this.cluster.getClusterer()\n\n          /**\n           * This event is fired when a cluster marker is clicked.\n           * @name MarkerClusterer#click\n           * @param {Cluster} c The cluster that was clicked.\n           * @event\n           */\n          google.maps.event.trigger(markerClusterer, 'click', this.cluster)\n          google.maps.event.trigger(markerClusterer, 'clusterclick', this.cluster) // deprecated name\n\n          // The default click handler follows. Disable it by setting\n          // the zoomOnClick property to false.\n          if (markerClusterer.getZoomOnClick()) {\n            // Zoom into the cluster.\n            const maxZoom = markerClusterer.getMaxZoom()\n\n            const bounds = this.cluster.getBounds()\n\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            // @ts-ignore\n            markerClusterer.getMap().fitBounds(bounds)\n\n            // There is a fix for Issue 170 here:\n            setTimeout(function timeout() {\n              // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n              // @ts-ignore\n              markerClusterer.getMap().fitBounds(bounds)\n\n              // Don't zoom beyond the max zoom level\n              // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n              // @ts-ignore\n              if (maxZoom !== null && markerClusterer.getMap().getZoom() > maxZoom) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n                // @ts-ignore\n                markerClusterer.getMap().setZoom(maxZoom + 1)\n              }\n            }, 100)\n          }\n\n          // Prevent event propagation to the map:\n          event.cancelBubble = true\n\n          if (event.stopPropagation) {\n            event.stopPropagation()\n          }\n        }\n      }\n    )\n\n    google.maps.event.addDomListener(\n      this.div,\n      'mouseover',\n      // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n      () => {\n        /**\n         * This event is fired when the mouse moves over a cluster marker.\n         * @name MarkerClusterer#mouseover\n         * @param {Cluster} c The cluster that the mouse moved over.\n         * @event\n         */\n        google.maps.event.trigger(this.cluster.getClusterer(), 'mouseover', this.cluster)\n      }\n    )\n\n    // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n    google.maps.event.addDomListener(\n      this.div,\n      'mouseout',\n      // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n      () => {\n        /**\n         * This event is fired when the mouse moves out of a cluster marker.\n         * @name MarkerClusterer#mouseout\n         * @param {Cluster} c The cluster that the mouse moved out of.\n         * @event\n         */\n        google.maps.event.trigger(this.cluster.getClusterer(), 'mouseout', this.cluster)\n      }\n    )\n  }\n\n  onRemove() {\n    if (this.div && this.div.parentNode) {\n      this.hide()\n\n      if (this.boundsChangedListener !== null) {\n        google.maps.event.removeListener(this.boundsChangedListener)\n      }\n\n      google.maps.event.clearInstanceListeners(this.div)\n\n      this.div.parentNode.removeChild(this.div)\n\n      this.div = null\n    }\n  }\n\n  draw() {\n    if (this.visible && this.div !== null && this.center) {\n      const { x, y } = this.getPosFromLatLng(this.center)\n\n      this.div.style.top = y + 'px'\n      this.div.style.left = x + 'px'\n    }\n  }\n\n  hide() {\n    if (this.div) {\n      this.div.style.display = 'none'\n    }\n\n    this.visible = false\n  }\n\n  show() {\n    if (this.div && this.center) {\n      let img = '',\n        divTitle = ''\n\n      // NOTE: values must be specified in px units\n      const bp = this.backgroundPosition.split(' ')\n\n      const spriteH = parseInt(bp[0].replace(/^\\s+|\\s+$/g, ''), 10)\n\n      const spriteV = parseInt(bp[1].replace(/^\\s+|\\s+$/g, ''), 10)\n\n      const pos = this.getPosFromLatLng(this.center)\n\n      if (this.sums === null || typeof this.sums.title === 'undefined' || this.sums.title === '') {\n        divTitle = this.cluster.getClusterer().getTitle()\n      } else {\n        divTitle = this.sums.title\n      }\n\n      this.div.style.cssText = this.createCss(pos)\n\n      img =\n        \"<img alt='\" +\n        divTitle +\n        \"' src='\" +\n        this.url +\n        \"' style='position: absolute; top: \" +\n        spriteV +\n        'px; left: ' +\n        spriteH +\n        'px; '\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      //@ts-ignore\n      if (!this.cluster.getClusterer().enableRetinaIcons) {\n        img +=\n          'clip: rect(' +\n          -1 * spriteV +\n          'px, ' +\n          (-1 * spriteH + this.width) +\n          'px, ' +\n          (-1 * spriteV + this.height) +\n          'px, ' +\n          -1 * spriteH +\n          'px);'\n      }\n\n      img += \"'>\"\n\n      this.div.innerHTML =\n        img +\n        \"<div style='\" +\n        'position: absolute;' +\n        'top: ' +\n        this.anchorText[0] +\n        'px;' +\n        'left: ' +\n        this.anchorText[1] +\n        'px;' +\n        'color: ' +\n        this.textColor +\n        ';' +\n        'font-size: ' +\n        this.textSize +\n        'px;' +\n        'font-family: ' +\n        this.fontFamily +\n        ';' +\n        'font-weight: ' +\n        this.fontWeight +\n        ';' +\n        'font-style: ' +\n        this.fontStyle +\n        ';' +\n        'text-decoration: ' +\n        this.textDecoration +\n        ';' +\n        'text-align: center;' +\n        'width: ' +\n        this.width +\n        'px;' +\n        'line-height:' +\n        this.height +\n        'px;' +\n        \"'>\" +\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        this.sums.text +\n        '</div>'\n\n      this.div.title = divTitle\n\n      this.div.style.display = ''\n    }\n\n    this.visible = true\n  }\n\n  useStyle(sums: ClusterIconInfo) {\n    this.sums = sums\n\n    const style = this.styles[Math.min(this.styles.length - 1, Math.max(0, sums.index - 1))]\n\n    this.url = style.url\n    this.height = style.height\n    this.width = style.width\n    this.anchorText = style.anchorText || [0, 0]\n    this.anchorIcon = style.anchorIcon || [this.height / 2, this.width / 2]\n\n    this.textColor = style.textColor || 'black'\n\n    this.textSize = style.textSize || 11\n\n    this.textDecoration = style.textDecoration || 'none'\n\n    this.fontWeight = style.fontWeight || 'bold'\n\n    this.fontStyle = style.fontStyle || 'normal'\n\n    this.fontFamily = style.fontFamily || 'Arial,sans-serif'\n\n    this.backgroundPosition = style.backgroundPosition || '0 0'\n  }\n\n  setCenter(center: google.maps.LatLng) {\n    this.center = center\n  }\n\n  createCss(pos: google.maps.Point): string {\n    const style = []\n\n    style.push('cursor: pointer;')\n\n    style.push('position: absolute; top: ' + pos.y + 'px; left: ' + pos.x + 'px;')\n\n    style.push('width: ' + this.width + 'px; height: ' + this.height + 'px;')\n\n    return style.join('')\n  }\n\n  getPosFromLatLng(latlng: google.maps.LatLng): google.maps.Point {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    const pos = this.getProjection().fromLatLngToDivPixel(latlng)\n\n    pos.x -= this.anchorIcon[1]\n\n    pos.y -= this.anchorIcon[0]\n\n    // pos.x = pos.x\n\n    // pos.y = pos.y\n\n    return pos\n  }\n}\n","/* global google */\n/* eslint-disable filenames/match-regex */\nimport { Clusterer } from './Clusterer'\n\nimport { ClusterIcon } from './ClusterIcon'\n\nimport { MarkerExtended } from './types'\n\nexport class Cluster {\n  markerClusterer: Clusterer\n  map: google.maps.Map | google.maps.StreetViewPanorama\n  gridSize: number\n  minClusterSize: number\n  averageCenter: boolean\n  markers: MarkerExtended[]\n  center: google.maps.LatLng | undefined\n  bounds: google.maps.LatLngBounds | null\n  clusterIcon: ClusterIcon\n\n  constructor(markerClusterer: Clusterer) {\n    this.markerClusterer = markerClusterer\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.map = this.markerClusterer.getMap()\n\n    this.gridSize = this.markerClusterer.getGridSize()\n\n    this.minClusterSize = this.markerClusterer.getMinimumClusterSize()\n\n    this.averageCenter = this.markerClusterer.getAverageCenter()\n\n    this.markers = []\n\n    this.center = undefined\n\n    this.bounds = null\n\n    this.clusterIcon = new ClusterIcon(this, this.markerClusterer.getStyles())\n  }\n\n  getSize(): number {\n    return this.markers.length\n  }\n\n  getMarkers(): MarkerExtended[] {\n    return this.markers\n  }\n\n  getCenter(): google.maps.LatLng | undefined {\n    return this.center\n  }\n\n  getMap(): google.maps.Map | google.maps.StreetViewPanorama {\n    return this.map\n  }\n\n  getClusterer(): Clusterer {\n    return this.markerClusterer\n  }\n\n  getBounds(): google.maps.LatLngBounds {\n    const bounds = new google.maps.LatLngBounds(this.center, this.center)\n\n    const markers = this.getMarkers()\n\n    for (let i = 0; i < markers.length; i++) {\n      const position = markers[i].getPosition()\n\n      if (position) {\n        bounds.extend(position)\n      }\n    }\n\n    return bounds\n  }\n\n  remove() {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.clusterIcon.setMap(null)\n\n    this.markers = []\n\n    delete this.markers\n  }\n\n  addMarker(marker: MarkerExtended): boolean {\n    if (this.isMarkerAlreadyAdded(marker)) {\n      return false\n    }\n\n    if (!this.center) {\n      const position = marker.getPosition()\n\n      if (position) {\n        this.center = position\n\n        this.calculateBounds()\n      }\n    } else {\n      if (this.averageCenter) {\n        const position = marker.getPosition()\n\n        if (position) {\n          const length = this.markers.length + 1\n\n          this.center = new google.maps.LatLng(\n            (this.center.lat() * (length - 1) + position.lat()) / length,\n            (this.center.lng() * (length - 1) + position.lng()) / length\n          )\n\n          this.calculateBounds()\n        }\n      }\n    }\n\n    marker.isAdded = true\n\n    this.markers.push(marker)\n\n    const mCount = this.markers.length\n\n    const maxZoom = this.markerClusterer.getMaxZoom()\n\n    if (maxZoom !== null && this.map.getZoom() > maxZoom) {\n      // Zoomed in past max zoom, so show the marker.\n      if (marker.getMap() !== this.map) {\n        marker.setMap(this.map)\n      }\n    } else if (mCount < this.minClusterSize) {\n      // Min cluster size not reached so show the marker.\n      if (marker.getMap() !== this.map) {\n        marker.setMap(this.map)\n      }\n    } else if (mCount === this.minClusterSize) {\n      // Hide the markers that were showing.\n      for (let i = 0; i < mCount; i++) {\n        this.markers[i].setMap(null)\n      }\n    } else {\n      marker.setMap(null)\n    }\n\n    this.updateIcon()\n\n    return true\n  }\n\n  isMarkerInClusterBounds(marker: MarkerExtended): boolean {\n    if (this.bounds !== null) {\n      const position = marker.getPosition()\n\n      if (position) {\n        return this.bounds.contains(position)\n      }\n    }\n\n    return false\n  }\n\n  calculateBounds() {\n    this.bounds = this.markerClusterer.getExtendedBounds(\n      new google.maps.LatLngBounds(this.center, this.center)\n    )\n  }\n\n  updateIcon() {\n    const mCount = this.markers.length\n\n    const maxZoom = this.markerClusterer.getMaxZoom()\n\n    if (maxZoom !== null && this.map.getZoom() > maxZoom) {\n      this.clusterIcon.hide()\n\n      return\n    }\n\n    if (mCount < this.minClusterSize) {\n      // Min cluster size not yet reached.\n      this.clusterIcon.hide()\n\n      return\n    }\n\n    if (this.center) {\n      this.clusterIcon.setCenter(this.center)\n    }\n\n    this.clusterIcon.useStyle(\n      this.markerClusterer.getCalculator()(this.markers, this.markerClusterer.getStyles().length)\n    )\n\n    this.clusterIcon.show()\n  }\n\n  isMarkerAlreadyAdded(marker: MarkerExtended): boolean {\n    if (this.markers.indexOf) {\n      return this.markers.includes(marker)\n    } else {\n      for (let i = 0; i < this.markers.length; i++) {\n        if (marker === this.markers[i]) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n}\n","/* global google */\n/* eslint-disable filenames/match-regex */\nimport { Cluster } from './Cluster'\n\nimport {\n  MarkerExtended,\n  ClustererOptions,\n  ClusterIconStyle,\n  TCalculator,\n  ClusterIconInfo,\n} from './types'\n\nconst CALCULATOR = function CALCULATOR(\n  markers: MarkerExtended[],\n  numStyles: number\n): ClusterIconInfo {\n  let index = 0\n\n  const title = ''\n\n  const count = markers.length.toString()\n\n  let dv: string | number = count\n\n  while (dv !== 0) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    dv = parseInt(dv, 10) / 10\n\n    index++\n  }\n\n  index = Math.min(index, numStyles)\n\n  return {\n    text: count,\n    index: index,\n    title: title,\n  }\n}\n\nconst BATCH_SIZE = 2000\n\nconst BATCH_SIZE_IE = 500\n\nconst IMAGE_PATH =\n  'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'\n\nconst IMAGE_EXTENSION = 'png'\n\nconst IMAGE_SIZES = [53, 56, 66, 78, 90]\n\nconst CLUSTERER_CLASS = 'cluster'\n\nexport class Clusterer {\n  markers: MarkerExtended[]\n  clusters: Cluster[]\n  listeners: google.maps.MapsEventListener[]\n  activeMap: google.maps.Map | google.maps.StreetViewPanorama | null\n  ready: boolean\n  gridSize: number\n  minClusterSize: number\n  maxZoom: number | null\n  styles: ClusterIconStyle[]\n  title: string\n  zoomOnClick: boolean\n  averageCenter: boolean\n  ignoreHidden: boolean\n  enableRetinaIcons: boolean\n  imagePath: string\n  imageExtension: string\n  imageSizes: number[]\n  calculator: TCalculator\n  batchSize: number\n  batchSizeIE: number\n  clusterClass: string\n  timerRefStatic: number | null\n\n  constructor(\n    map: google.maps.Map,\n    optMarkers: MarkerExtended[] = [],\n    optOptions: ClustererOptions = {}\n  ) {\n    this.extend(Clusterer, google.maps.OverlayView)\n\n    this.markers = []\n    this.clusters = []\n    this.listeners = []\n    this.activeMap = null\n    this.ready = false\n    this.gridSize = optOptions.gridSize || 60\n    this.minClusterSize = optOptions.minimumClusterSize || 2\n    this.maxZoom = optOptions.maxZoom || null\n    this.styles = optOptions.styles || []\n\n    this.title = optOptions.title || ''\n\n    this.zoomOnClick = true\n\n    if (optOptions.zoomOnClick !== undefined) {\n      this.zoomOnClick = optOptions.zoomOnClick\n    }\n\n    this.averageCenter = false\n\n    if (optOptions.averageCenter !== undefined) {\n      this.averageCenter = optOptions.averageCenter\n    }\n\n    this.ignoreHidden = false\n\n    if (optOptions.ignoreHidden !== undefined) {\n      this.ignoreHidden = optOptions.ignoreHidden\n    }\n\n    this.enableRetinaIcons = false\n\n    if (optOptions.enableRetinaIcons !== undefined) {\n      this.enableRetinaIcons = optOptions.enableRetinaIcons\n    }\n    this.imagePath = optOptions.imagePath || IMAGE_PATH\n\n    this.imageExtension = optOptions.imageExtension || IMAGE_EXTENSION\n\n    this.imageSizes = optOptions.imageSizes || IMAGE_SIZES\n\n    this.calculator = optOptions.calculator || CALCULATOR\n\n    this.batchSize = optOptions.batchSize || BATCH_SIZE\n\n    this.batchSizeIE = optOptions.batchSizeIE || BATCH_SIZE_IE\n\n    this.clusterClass = optOptions.clusterClass || CLUSTERER_CLASS\n\n    if (navigator.userAgent.toLowerCase().indexOf('msie') !== -1) {\n      // Try to avoid IE timeout when processing a huge number of markers:\n      this.batchSize = this.batchSizeIE\n    }\n\n    this.timerRefStatic = null\n\n    this.setupStyles()\n\n    this.addMarkers(optMarkers, true)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.setMap(map) // Note: this causes onAdd to be called\n  }\n\n  onAdd() {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.activeMap = this.getMap()\n\n    this.ready = true\n\n    this.repaint()\n\n    // Add the map event listeners\n    this.listeners = [\n      google.maps.event.addListener(\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        this.getMap(),\n        'zoom_changed',\n        // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n        () => {\n          this.resetViewport(false)\n          // Workaround for this Google bug: when map is at level 0 and \"-\" of\n          // zoom slider is clicked, a \"zoom_changed\" event is fired even though\n          // the map doesn't zoom out any further. In this situation, no \"idle\"\n          // event is triggered so the cluster markers that have been removed\n          // do not get redrawn. Same goes for a zoom in at maxZoom.\n          if (\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            // @ts-ignore\n            this.getMap().getZoom() === (this.get('minZoom') || 0) ||\n            // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n            // @ts-ignore\n            this.getMap().getZoom() === this.get('maxZoom')\n          ) {\n            google.maps.event.trigger(this, 'idle')\n          }\n        }\n      ),\n      google.maps.event.addListener(\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        this.getMap(),\n        'idle',\n        // eslint-disable-next-line  @getify/proper-arrows/this, @getify/proper-arrows/name\n        () => {\n          this.redraw()\n        }\n      ),\n    ]\n  }\n\n  // eslint-disable-next-line @getify/proper-arrows/this\n  onRemove() {\n    // Put all the managed markers back on the map:\n    for (let i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].getMap() !== this.activeMap) {\n        this.markers[i].setMap(this.activeMap)\n      }\n    }\n\n    // Remove all clusters:\n    for (let i = 0; i < this.clusters.length; i++) {\n      this.clusters[i].remove()\n    }\n\n    this.clusters = []\n\n    // Remove map event listeners:\n    for (let i = 0; i < this.listeners.length; i++) {\n      google.maps.event.removeListener(this.listeners[i])\n    }\n\n    this.listeners = []\n\n    this.activeMap = null\n\n    this.ready = false\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  draw() {}\n\n  setupStyles() {\n    if (this.styles.length > 0) {\n      return\n    }\n\n    for (let i = 0; i < this.imageSizes.length; i++) {\n      this.styles.push({\n        url: this.imagePath + (i + 1) + '.' + this.imageExtension,\n        height: this.imageSizes[i],\n        width: this.imageSizes[i],\n      })\n    }\n  }\n\n  fitMapToMarkers() {\n    const markers = this.getMarkers()\n\n    const bounds = new google.maps.LatLngBounds()\n\n    for (let i = 0; i < markers.length; i++) {\n      const position = markers[i].getPosition()\n      if (position) {\n        bounds.extend(position)\n      }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    this.getMap().fitBounds(bounds)\n  }\n\n  getGridSize(): number {\n    return this.gridSize\n  }\n\n  setGridSize(gridSize: number) {\n    this.gridSize = gridSize\n  }\n\n  getMinimumClusterSize(): number {\n    return this.minClusterSize\n  }\n\n  setMinimumClusterSize(minimumClusterSize: number) {\n    this.minClusterSize = minimumClusterSize\n  }\n\n  getMaxZoom(): number | null {\n    return this.maxZoom\n  }\n\n  setMaxZoom(maxZoom: number) {\n    this.maxZoom = maxZoom\n  }\n\n  getStyles(): ClusterIconStyle[] {\n    return this.styles\n  }\n\n  setStyles(styles: ClusterIconStyle[]) {\n    this.styles = styles\n  }\n\n  getTitle(): string {\n    return this.title\n  }\n\n  setTitle(title: string) {\n    this.title = title\n  }\n\n  getZoomOnClick(): boolean {\n    return this.zoomOnClick\n  }\n\n  setZoomOnClick(zoomOnClick: boolean) {\n    this.zoomOnClick = zoomOnClick\n  }\n\n  getAverageCenter(): boolean {\n    return this.averageCenter\n  }\n\n  setAverageCenter(averageCenter: boolean) {\n    this.averageCenter = averageCenter\n  }\n\n  getIgnoreHidden(): boolean {\n    return this.ignoreHidden\n  }\n\n  setIgnoreHidden(ignoreHidden: boolean) {\n    this.ignoreHidden = ignoreHidden\n  }\n\n  getEnableRetinaIcons(): boolean {\n    return this.enableRetinaIcons\n  }\n\n  setEnableRetinaIcons(enableRetinaIcons: boolean) {\n    this.enableRetinaIcons = enableRetinaIcons\n  }\n\n  getImageExtension(): string {\n    return this.imageExtension\n  }\n\n  setImageExtension(imageExtension: string) {\n    this.imageExtension = imageExtension\n  }\n\n  getImagePath(): string {\n    return this.imagePath\n  }\n\n  setImagePath(imagePath: string) {\n    this.imagePath = imagePath\n  }\n\n  getImageSizes(): number[] {\n    return this.imageSizes\n  }\n\n  setImageSizes(imageSizes: number[]) {\n    this.imageSizes = imageSizes\n  }\n\n  getCalculator(): TCalculator {\n    return this.calculator\n  }\n\n  setCalculator(calculator: TCalculator) {\n    this.calculator = calculator\n  }\n\n  getBatchSizeIE(): number {\n    return this.batchSizeIE\n  }\n\n  setBatchSizeIE(batchSizeIE: number) {\n    this.batchSizeIE = batchSizeIE\n  }\n\n  getClusterClass(): string {\n    return this.clusterClass\n  }\n\n  setClusterClass(clusterClass: string) {\n    this.clusterClass = clusterClass\n  }\n\n  getMarkers(): MarkerExtended[] {\n    return this.markers\n  }\n\n  getTotalMarkers(): number {\n    return this.markers.length\n  }\n\n  getClusters(): Cluster[] {\n    return this.clusters\n  }\n\n  getTotalClusters(): number {\n    return this.clusters.length\n  }\n\n  addMarker(marker: MarkerExtended, optNoDraw: boolean) {\n    this.pushMarkerTo(marker)\n\n    if (!optNoDraw) {\n      this.redraw()\n    }\n  }\n\n  addMarkers(markers: MarkerExtended[], optNoDraw: boolean) {\n    for (const key in markers) {\n      if (markers.hasOwnProperty(key)) {\n        this.pushMarkerTo(markers[key])\n      }\n    }\n\n    if (!optNoDraw) {\n      this.redraw()\n    }\n  }\n\n  pushMarkerTo(marker: MarkerExtended) {\n    // If the marker is draggable add a listener so we can update the clusters on the dragend:\n    if (marker.getDraggable()) {\n      // eslint-disable-next-line @getify/proper-arrows/name, @getify/proper-arrows/this\n      google.maps.event.addListener(marker, 'dragend', () => {\n        if (this.ready) {\n          marker.isAdded = false\n\n          this.repaint()\n        }\n      })\n    }\n\n    marker.isAdded = false\n\n    this.markers.push(marker)\n  }\n\n  removeMarker_(marker: MarkerExtended): boolean {\n    let index = -1\n\n    if (this.markers.indexOf) {\n      index = this.markers.indexOf(marker)\n    } else {\n      for (let i = 0; i < this.markers.length; i++) {\n        if (marker === this.markers[i]) {\n          index = i\n\n          break\n        }\n      }\n    }\n\n    if (index === -1) {\n      // Marker is not in our list of markers, so do nothing:\n      return false\n    }\n\n    marker.setMap(null)\n\n    this.markers.splice(index, 1) // Remove the marker from the list of managed markers\n\n    return true\n  }\n\n  removeMarker(marker: MarkerExtended, optNoDraw: boolean): boolean {\n    const removed = this.removeMarker_(marker)\n\n    if (!optNoDraw && removed) {\n      this.repaint()\n    }\n\n    return removed\n  }\n\n  removeMarkers(markers: MarkerExtended[], optNoDraw: boolean): boolean {\n    let removed = false\n\n    for (let i = 0; i < markers.length; i++) {\n      removed = removed || this.removeMarker_(markers[i])\n    }\n\n    if (!optNoDraw && removed) {\n      this.repaint()\n    }\n\n    return removed\n  }\n\n  clearMarkers() {\n    this.resetViewport(true)\n\n    this.markers = []\n  }\n\n  repaint() {\n    const oldClusters = this.clusters.slice()\n\n    this.clusters = []\n\n    this.resetViewport(false)\n\n    this.redraw()\n\n    // Remove the old clusters.\n    // Do it in a timeout to prevent blinking effect.\n    setTimeout(function timeout() {\n      for (let i = 0; i < oldClusters.length; i++) {\n        oldClusters[i].remove()\n      }\n    }, 0)\n  }\n\n  getExtendedBounds(bounds: google.maps.LatLngBounds): google.maps.LatLngBounds {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    const projection = this.getProjection()\n    // Convert the points to pixels and the extend out by the grid size.\n    const trPix = projection.fromLatLngToDivPixel(\n      // Turn the bounds into latlng.\n      new google.maps.LatLng(bounds.getNorthEast().lat(), bounds.getNorthEast().lng())\n    )\n\n    trPix.x += this.gridSize\n    trPix.y -= this.gridSize\n\n    const blPix = projection.fromLatLngToDivPixel(\n      // Turn the bounds into latlng.\n      new google.maps.LatLng(bounds.getSouthWest().lat(), bounds.getSouthWest().lng())\n    )\n\n    blPix.x -= this.gridSize\n    blPix.y += this.gridSize\n\n    // Extend the bounds to contain the new bounds.\n    bounds.extend(\n      // Convert the pixel points back to LatLng nw\n      projection.fromDivPixelToLatLng(trPix)\n    )\n\n    bounds.extend(\n      // Convert the pixel points back to LatLng sw\n      projection.fromDivPixelToLatLng(blPix)\n    )\n\n    return bounds\n  }\n\n  redraw() {\n    // Redraws all the clusters.\n    this.createClusters(0)\n  }\n\n  resetViewport(optHide: boolean) {\n    // Remove all the clusters\n    for (let i = 0; i < this.clusters.length; i++) {\n      this.clusters[i].remove()\n    }\n\n    this.clusters = []\n\n    // Reset the markers to not be added and to be removed from the map.\n    for (let i = 0; i < this.markers.length; i++) {\n      const marker = this.markers[i]\n\n      marker.isAdded = false\n\n      if (optHide) {\n        marker.setMap(null)\n      }\n    }\n  }\n\n  distanceBetweenPoints(p1: google.maps.LatLng, p2: google.maps.LatLng): number {\n    const R = 6371 // Radius of the Earth in km\n\n    const dLat = ((p2.lat() - p1.lat()) * Math.PI) / 180\n    const dLon = ((p2.lng() - p1.lng()) * Math.PI) / 180\n\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos((p1.lat() * Math.PI) / 180) *\n        Math.cos((p2.lat() * Math.PI) / 180) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2)\n\n    return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)))\n  }\n\n  isMarkerInBounds(marker: MarkerExtended, bounds: google.maps.LatLngBounds): boolean {\n    const position = marker.getPosition()\n\n    if (position) {\n      return bounds.contains(position)\n    }\n\n    return false\n  }\n\n  addToClosestCluster(marker: MarkerExtended) {\n    let cluster\n\n    let distance = 40000 // Some large number\n\n    let clusterToAddTo = null\n\n    for (let i = 0; i < this.clusters.length; i++) {\n      cluster = this.clusters[i]\n\n      const center = cluster.getCenter()\n\n      const position = marker.getPosition()\n\n      if (center && position) {\n        const d = this.distanceBetweenPoints(center, position)\n\n        if (d < distance) {\n          distance = d\n\n          clusterToAddTo = cluster\n        }\n      }\n    }\n\n    if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {\n      clusterToAddTo.addMarker(marker)\n    } else {\n      cluster = new Cluster(this)\n\n      cluster.addMarker(marker)\n\n      this.clusters.push(cluster)\n    }\n  }\n\n  createClusters(iFirst: number) {\n    if (!this.ready) {\n      return\n    }\n\n    // Cancel previous batch processing if we're working on the first batch:\n    if (iFirst === 0) {\n      /**\n       * This event is fired when the <code>Clusterer</code> begins\n       *  clustering markers.\n       * @name Clusterer#clusteringbegin\n       * @param {Clusterer} mc The Clusterer whose markers are being clustered.\n       * @event\n       */\n      google.maps.event.trigger(this, 'clusteringbegin', this)\n\n      if (this.timerRefStatic !== null) {\n        window.clearTimeout(this.timerRefStatic)\n\n        delete this.timerRefStatic\n      }\n    }\n\n    // Get our current map view bounds.\n    // Create a new bounds object so we don't affect the map.\n    //\n    // See Comments 9 & 11 on Issue 3651 relating to this workaround for a Google Maps bug:\n    const mapBounds =\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n      this.getMap().getZoom() > 3\n        ? new google.maps.LatLngBounds(\n          // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n          // @ts-ignore\n          this.getMap()\n            .getBounds()\n            .getSouthWest(),\n          // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n          // @ts-ignore\n          this.getMap()\n            .getBounds()\n            .getNorthEast()\n        )\n        : new google.maps.LatLngBounds(\n          new google.maps.LatLng(85.02070771743472, -178.48388434375),\n          new google.maps.LatLng(-85.08136444384544, 178.00048865625)\n        )\n\n    const bounds = this.getExtendedBounds(mapBounds)\n\n    const iLast = Math.min(iFirst + this.batchSize, this.markers.length)\n\n    for (let i = iFirst; i < iLast; i++) {\n      const marker = this.markers[i]\n\n      if (!marker.isAdded && this.isMarkerInBounds(marker, bounds)) {\n        if (!this.ignoreHidden || (this.ignoreHidden && marker.getVisible())) {\n          this.addToClosestCluster(marker)\n        }\n      }\n    }\n\n    if (iLast < this.markers.length) {\n      this.timerRefStatic = window.setTimeout(\n        // eslint-disable-next-line @getify/proper-arrows/this, @getify/proper-arrows/name\n        () => {\n          this.createClusters(iLast)\n        },\n        0\n      )\n    } else {\n      this.timerRefStatic = null\n\n      /**\n       * This event is fired when the <code>Clusterer</code> stops\n       *  clustering markers.\n       * @name Clusterer#clusteringend\n       * @param {Clusterer} mc The Clusterer whose markers are being clustered.\n       * @event\n       */\n      google.maps.event.trigger(this, 'clusteringend', this)\n    }\n  }\n\n  extend(obj1: any, obj2: any): any {\n    return function applyExtend(object: any) {\n      // eslint-disable-next-line guard-for-in\n      for (const property in object.prototype) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        this.prototype[property] = object.prototype[property]\n      }\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n      // @ts-ignore\n      return this\n    }.apply(obj1, [obj2])\n  }\n}\n"]},"metadata":{},"sourceType":"module"}