{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isArrayExpression = isArrayExpression;\nexports.isAssignmentExpression = isAssignmentExpression;\nexports.isBinaryExpression = isBinaryExpression;\nexports.isInterpreterDirective = isInterpreterDirective;\nexports.isDirective = isDirective;\nexports.isDirectiveLiteral = isDirectiveLiteral;\nexports.isBlockStatement = isBlockStatement;\nexports.isBreakStatement = isBreakStatement;\nexports.isCallExpression = isCallExpression;\nexports.isCatchClause = isCatchClause;\nexports.isConditionalExpression = isConditionalExpression;\nexports.isContinueStatement = isContinueStatement;\nexports.isDebuggerStatement = isDebuggerStatement;\nexports.isDoWhileStatement = isDoWhileStatement;\nexports.isEmptyStatement = isEmptyStatement;\nexports.isExpressionStatement = isExpressionStatement;\nexports.isFile = isFile;\nexports.isForInStatement = isForInStatement;\nexports.isForStatement = isForStatement;\nexports.isFunctionDeclaration = isFunctionDeclaration;\nexports.isFunctionExpression = isFunctionExpression;\nexports.isIdentifier = isIdentifier;\nexports.isIfStatement = isIfStatement;\nexports.isLabeledStatement = isLabeledStatement;\nexports.isStringLiteral = isStringLiteral;\nexports.isNumericLiteral = isNumericLiteral;\nexports.isNullLiteral = isNullLiteral;\nexports.isBooleanLiteral = isBooleanLiteral;\nexports.isRegExpLiteral = isRegExpLiteral;\nexports.isLogicalExpression = isLogicalExpression;\nexports.isMemberExpression = isMemberExpression;\nexports.isNewExpression = isNewExpression;\nexports.isProgram = isProgram;\nexports.isObjectExpression = isObjectExpression;\nexports.isObjectMethod = isObjectMethod;\nexports.isObjectProperty = isObjectProperty;\nexports.isRestElement = isRestElement;\nexports.isReturnStatement = isReturnStatement;\nexports.isSequenceExpression = isSequenceExpression;\nexports.isParenthesizedExpression = isParenthesizedExpression;\nexports.isSwitchCase = isSwitchCase;\nexports.isSwitchStatement = isSwitchStatement;\nexports.isThisExpression = isThisExpression;\nexports.isThrowStatement = isThrowStatement;\nexports.isTryStatement = isTryStatement;\nexports.isUnaryExpression = isUnaryExpression;\nexports.isUpdateExpression = isUpdateExpression;\nexports.isVariableDeclaration = isVariableDeclaration;\nexports.isVariableDeclarator = isVariableDeclarator;\nexports.isWhileStatement = isWhileStatement;\nexports.isWithStatement = isWithStatement;\nexports.isAssignmentPattern = isAssignmentPattern;\nexports.isArrayPattern = isArrayPattern;\nexports.isArrowFunctionExpression = isArrowFunctionExpression;\nexports.isClassBody = isClassBody;\nexports.isClassExpression = isClassExpression;\nexports.isClassDeclaration = isClassDeclaration;\nexports.isExportAllDeclaration = isExportAllDeclaration;\nexports.isExportDefaultDeclaration = isExportDefaultDeclaration;\nexports.isExportNamedDeclaration = isExportNamedDeclaration;\nexports.isExportSpecifier = isExportSpecifier;\nexports.isForOfStatement = isForOfStatement;\nexports.isImportDeclaration = isImportDeclaration;\nexports.isImportDefaultSpecifier = isImportDefaultSpecifier;\nexports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;\nexports.isImportSpecifier = isImportSpecifier;\nexports.isMetaProperty = isMetaProperty;\nexports.isClassMethod = isClassMethod;\nexports.isObjectPattern = isObjectPattern;\nexports.isSpreadElement = isSpreadElement;\nexports.isSuper = isSuper;\nexports.isTaggedTemplateExpression = isTaggedTemplateExpression;\nexports.isTemplateElement = isTemplateElement;\nexports.isTemplateLiteral = isTemplateLiteral;\nexports.isYieldExpression = isYieldExpression;\nexports.isAnyTypeAnnotation = isAnyTypeAnnotation;\nexports.isArrayTypeAnnotation = isArrayTypeAnnotation;\nexports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;\nexports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;\nexports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;\nexports.isClassImplements = isClassImplements;\nexports.isDeclareClass = isDeclareClass;\nexports.isDeclareFunction = isDeclareFunction;\nexports.isDeclareInterface = isDeclareInterface;\nexports.isDeclareModule = isDeclareModule;\nexports.isDeclareModuleExports = isDeclareModuleExports;\nexports.isDeclareTypeAlias = isDeclareTypeAlias;\nexports.isDeclareOpaqueType = isDeclareOpaqueType;\nexports.isDeclareVariable = isDeclareVariable;\nexports.isDeclareExportDeclaration = isDeclareExportDeclaration;\nexports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;\nexports.isDeclaredPredicate = isDeclaredPredicate;\nexports.isExistsTypeAnnotation = isExistsTypeAnnotation;\nexports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;\nexports.isFunctionTypeParam = isFunctionTypeParam;\nexports.isGenericTypeAnnotation = isGenericTypeAnnotation;\nexports.isInferredPredicate = isInferredPredicate;\nexports.isInterfaceExtends = isInterfaceExtends;\nexports.isInterfaceDeclaration = isInterfaceDeclaration;\nexports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;\nexports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;\nexports.isMixedTypeAnnotation = isMixedTypeAnnotation;\nexports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;\nexports.isNullableTypeAnnotation = isNullableTypeAnnotation;\nexports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;\nexports.isNumberTypeAnnotation = isNumberTypeAnnotation;\nexports.isObjectTypeAnnotation = isObjectTypeAnnotation;\nexports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;\nexports.isObjectTypeCallProperty = isObjectTypeCallProperty;\nexports.isObjectTypeIndexer = isObjectTypeIndexer;\nexports.isObjectTypeProperty = isObjectTypeProperty;\nexports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;\nexports.isOpaqueType = isOpaqueType;\nexports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;\nexports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;\nexports.isStringTypeAnnotation = isStringTypeAnnotation;\nexports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;\nexports.isThisTypeAnnotation = isThisTypeAnnotation;\nexports.isTupleTypeAnnotation = isTupleTypeAnnotation;\nexports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;\nexports.isTypeAlias = isTypeAlias;\nexports.isTypeAnnotation = isTypeAnnotation;\nexports.isTypeCastExpression = isTypeCastExpression;\nexports.isTypeParameter = isTypeParameter;\nexports.isTypeParameterDeclaration = isTypeParameterDeclaration;\nexports.isTypeParameterInstantiation = isTypeParameterInstantiation;\nexports.isUnionTypeAnnotation = isUnionTypeAnnotation;\nexports.isVariance = isVariance;\nexports.isVoidTypeAnnotation = isVoidTypeAnnotation;\nexports.isEnumDeclaration = isEnumDeclaration;\nexports.isEnumBooleanBody = isEnumBooleanBody;\nexports.isEnumNumberBody = isEnumNumberBody;\nexports.isEnumStringBody = isEnumStringBody;\nexports.isEnumSymbolBody = isEnumSymbolBody;\nexports.isEnumBooleanMember = isEnumBooleanMember;\nexports.isEnumNumberMember = isEnumNumberMember;\nexports.isEnumStringMember = isEnumStringMember;\nexports.isEnumDefaultedMember = isEnumDefaultedMember;\nexports.isJSXAttribute = isJSXAttribute;\nexports.isJSXClosingElement = isJSXClosingElement;\nexports.isJSXElement = isJSXElement;\nexports.isJSXEmptyExpression = isJSXEmptyExpression;\nexports.isJSXExpressionContainer = isJSXExpressionContainer;\nexports.isJSXSpreadChild = isJSXSpreadChild;\nexports.isJSXIdentifier = isJSXIdentifier;\nexports.isJSXMemberExpression = isJSXMemberExpression;\nexports.isJSXNamespacedName = isJSXNamespacedName;\nexports.isJSXOpeningElement = isJSXOpeningElement;\nexports.isJSXSpreadAttribute = isJSXSpreadAttribute;\nexports.isJSXText = isJSXText;\nexports.isJSXFragment = isJSXFragment;\nexports.isJSXOpeningFragment = isJSXOpeningFragment;\nexports.isJSXClosingFragment = isJSXClosingFragment;\nexports.isNoop = isNoop;\nexports.isPlaceholder = isPlaceholder;\nexports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;\nexports.isArgumentPlaceholder = isArgumentPlaceholder;\nexports.isAwaitExpression = isAwaitExpression;\nexports.isBindExpression = isBindExpression;\nexports.isClassProperty = isClassProperty;\nexports.isOptionalMemberExpression = isOptionalMemberExpression;\nexports.isPipelineTopicExpression = isPipelineTopicExpression;\nexports.isPipelineBareFunction = isPipelineBareFunction;\nexports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;\nexports.isOptionalCallExpression = isOptionalCallExpression;\nexports.isClassPrivateProperty = isClassPrivateProperty;\nexports.isClassPrivateMethod = isClassPrivateMethod;\nexports.isImport = isImport;\nexports.isDecorator = isDecorator;\nexports.isDoExpression = isDoExpression;\nexports.isExportDefaultSpecifier = isExportDefaultSpecifier;\nexports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;\nexports.isPrivateName = isPrivateName;\nexports.isBigIntLiteral = isBigIntLiteral;\nexports.isRecordExpression = isRecordExpression;\nexports.isTupleExpression = isTupleExpression;\nexports.isTSParameterProperty = isTSParameterProperty;\nexports.isTSDeclareFunction = isTSDeclareFunction;\nexports.isTSDeclareMethod = isTSDeclareMethod;\nexports.isTSQualifiedName = isTSQualifiedName;\nexports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;\nexports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;\nexports.isTSPropertySignature = isTSPropertySignature;\nexports.isTSMethodSignature = isTSMethodSignature;\nexports.isTSIndexSignature = isTSIndexSignature;\nexports.isTSAnyKeyword = isTSAnyKeyword;\nexports.isTSBooleanKeyword = isTSBooleanKeyword;\nexports.isTSBigIntKeyword = isTSBigIntKeyword;\nexports.isTSNeverKeyword = isTSNeverKeyword;\nexports.isTSNullKeyword = isTSNullKeyword;\nexports.isTSNumberKeyword = isTSNumberKeyword;\nexports.isTSObjectKeyword = isTSObjectKeyword;\nexports.isTSStringKeyword = isTSStringKeyword;\nexports.isTSSymbolKeyword = isTSSymbolKeyword;\nexports.isTSUndefinedKeyword = isTSUndefinedKeyword;\nexports.isTSUnknownKeyword = isTSUnknownKeyword;\nexports.isTSVoidKeyword = isTSVoidKeyword;\nexports.isTSThisType = isTSThisType;\nexports.isTSFunctionType = isTSFunctionType;\nexports.isTSConstructorType = isTSConstructorType;\nexports.isTSTypeReference = isTSTypeReference;\nexports.isTSTypePredicate = isTSTypePredicate;\nexports.isTSTypeQuery = isTSTypeQuery;\nexports.isTSTypeLiteral = isTSTypeLiteral;\nexports.isTSArrayType = isTSArrayType;\nexports.isTSTupleType = isTSTupleType;\nexports.isTSOptionalType = isTSOptionalType;\nexports.isTSRestType = isTSRestType;\nexports.isTSUnionType = isTSUnionType;\nexports.isTSIntersectionType = isTSIntersectionType;\nexports.isTSConditionalType = isTSConditionalType;\nexports.isTSInferType = isTSInferType;\nexports.isTSParenthesizedType = isTSParenthesizedType;\nexports.isTSTypeOperator = isTSTypeOperator;\nexports.isTSIndexedAccessType = isTSIndexedAccessType;\nexports.isTSMappedType = isTSMappedType;\nexports.isTSLiteralType = isTSLiteralType;\nexports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;\nexports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;\nexports.isTSInterfaceBody = isTSInterfaceBody;\nexports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;\nexports.isTSAsExpression = isTSAsExpression;\nexports.isTSTypeAssertion = isTSTypeAssertion;\nexports.isTSEnumDeclaration = isTSEnumDeclaration;\nexports.isTSEnumMember = isTSEnumMember;\nexports.isTSModuleDeclaration = isTSModuleDeclaration;\nexports.isTSModuleBlock = isTSModuleBlock;\nexports.isTSImportType = isTSImportType;\nexports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;\nexports.isTSExternalModuleReference = isTSExternalModuleReference;\nexports.isTSNonNullExpression = isTSNonNullExpression;\nexports.isTSExportAssignment = isTSExportAssignment;\nexports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;\nexports.isTSTypeAnnotation = isTSTypeAnnotation;\nexports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;\nexports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;\nexports.isTSTypeParameter = isTSTypeParameter;\nexports.isExpression = isExpression;\nexports.isBinary = isBinary;\nexports.isScopable = isScopable;\nexports.isBlockParent = isBlockParent;\nexports.isBlock = isBlock;\nexports.isStatement = isStatement;\nexports.isTerminatorless = isTerminatorless;\nexports.isCompletionStatement = isCompletionStatement;\nexports.isConditional = isConditional;\nexports.isLoop = isLoop;\nexports.isWhile = isWhile;\nexports.isExpressionWrapper = isExpressionWrapper;\nexports.isFor = isFor;\nexports.isForXStatement = isForXStatement;\nexports.isFunction = isFunction;\nexports.isFunctionParent = isFunctionParent;\nexports.isPureish = isPureish;\nexports.isDeclaration = isDeclaration;\nexports.isPatternLike = isPatternLike;\nexports.isLVal = isLVal;\nexports.isTSEntityName = isTSEntityName;\nexports.isLiteral = isLiteral;\nexports.isImmutable = isImmutable;\nexports.isUserWhitespacable = isUserWhitespacable;\nexports.isMethod = isMethod;\nexports.isObjectMember = isObjectMember;\nexports.isProperty = isProperty;\nexports.isUnaryLike = isUnaryLike;\nexports.isPattern = isPattern;\nexports.isClass = isClass;\nexports.isModuleDeclaration = isModuleDeclaration;\nexports.isExportDeclaration = isExportDeclaration;\nexports.isModuleSpecifier = isModuleSpecifier;\nexports.isFlow = isFlow;\nexports.isFlowType = isFlowType;\nexports.isFlowBaseAnnotation = isFlowBaseAnnotation;\nexports.isFlowDeclaration = isFlowDeclaration;\nexports.isFlowPredicate = isFlowPredicate;\nexports.isEnumBody = isEnumBody;\nexports.isEnumMember = isEnumMember;\nexports.isJSX = isJSX;\nexports.isPrivate = isPrivate;\nexports.isTSTypeElement = isTSTypeElement;\nexports.isTSType = isTSType;\nexports.isNumberLiteral = isNumberLiteral;\nexports.isRegexLiteral = isRegexLiteral;\nexports.isRestProperty = isRestProperty;\nexports.isSpreadProperty = isSpreadProperty;\n\nvar _shallowEqual = _interopRequireDefault(require(\"../../utils/shallowEqual\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isArrayExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAssignmentExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AssignmentExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBinaryExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BinaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterpreterDirective(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterpreterDirective\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDirective(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Directive\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDirectiveLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DirectiveLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlockStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BlockStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBreakStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BreakStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCallExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCatchClause(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CatchClause\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isConditionalExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ConditionalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isContinueStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ContinueStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDebuggerStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DebuggerStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDoWhileStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DoWhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEmptyStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EmptyStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpressionStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExpressionStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFile(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"File\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForInStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForInStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Identifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIfStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLabeledStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LabeledStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumericLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumericLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRegExpLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RegExpLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLogicalExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LogicalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNewExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NewExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isProgram(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Program\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRestElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RestElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isReturnStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ReturnStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSequenceExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SequenceExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isParenthesizedExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ParenthesizedExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSwitchCase(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SwitchCase\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSwitchStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SwitchStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThisExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThisExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThrowStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThrowStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTryStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TryStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnaryExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUpdateExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UpdateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariableDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VariableDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariableDeclarator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VariableDeclarator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWhileStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"WhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWithStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"WithStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAssignmentPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AssignmentPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrayPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrowFunctionExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrowFunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDefaultDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDefaultDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportNamedDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportNamedDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForOfStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForOfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMetaProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MetaProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSpreadElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SpreadElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSuper(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Super\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTaggedTemplateExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TaggedTemplateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTemplateElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TemplateElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTemplateLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TemplateLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isYieldExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"YieldExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAnyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AnyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrayTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassImplements(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassImplements\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareClass(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareClass\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareInterface(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareInterface\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareModule(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareModule\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareModuleExports(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareModuleExports\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareTypeAlias(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareTypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareOpaqueType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareOpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareVariable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareVariable\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclaredPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclaredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExistsTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExistsTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionTypeParam(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionTypeParam\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isGenericTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"GenericTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInferredPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InferredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceExtends(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceExtends\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIntersectionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IntersectionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMixedTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MixedTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEmptyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EmptyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullableTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullableTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeInternalSlot(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeInternalSlot\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeCallProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeCallProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeIndexer(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeIndexer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeSpreadProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeSpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOpaqueType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isQualifiedTypeIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"QualifiedTypeIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSymbolTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SymbolTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThisTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThisTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTupleTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TupleTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeofTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeofTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeAlias(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeCastExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeCastExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameter(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariance(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Variance\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVoidTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VoidTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBooleanBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBooleanBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumNumberBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumNumberBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumStringBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumStringBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumSymbolBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumSymbolBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBooleanMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBooleanMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumNumberMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumNumberMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumStringMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumStringMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumDefaultedMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumDefaultedMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXClosingElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXClosingElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXEmptyExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXEmptyExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXExpressionContainer(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXExpressionContainer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXSpreadChild(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXSpreadChild\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXNamespacedName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXNamespacedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXOpeningElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXOpeningElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXSpreadAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXSpreadAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXText(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXText\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXOpeningFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXOpeningFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXClosingFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXClosingFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNoop(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Noop\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPlaceholder(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Placeholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isV8IntrinsicIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"V8IntrinsicIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArgumentPlaceholder(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArgumentPlaceholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAwaitExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AwaitExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBindExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BindExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelineTopicExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelineTopicExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelineBareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelineBareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelinePrimaryTopicReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelinePrimaryTopicReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalCallExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalCallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassPrivateProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassPrivateProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassPrivateMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassPrivateMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImport(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Import\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDecorator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Decorator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDoExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DoExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPrivateName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PrivateName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBigIntLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BigIntLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRecordExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RecordExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTupleExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TupleExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSParameterProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSParameterProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSDeclareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSDeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSDeclareMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSDeclareMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSQualifiedName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSQualifiedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSCallSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSCallSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConstructSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConstructSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSPropertySignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSPropertySignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSMethodSignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSMethodSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIndexSignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIndexSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSAnyKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSAnyKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBooleanKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSBooleanKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBigIntKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSBigIntKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNeverKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNeverKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNullKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNullKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNumberKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNumberKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSObjectKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSObjectKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSStringKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSStringKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSSymbolKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSSymbolKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUndefinedKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUndefinedKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUnknownKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUnknownKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSVoidKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSVoidKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSThisType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSThisType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSFunctionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSFunctionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConstructorType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConstructorType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypePredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypePredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeQuery(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeQuery\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSArrayType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSArrayType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTupleType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTupleType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSOptionalType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSOptionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSRestType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSRestType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUnionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUnionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIntersectionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIntersectionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConditionalType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConditionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInferType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInferType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSParenthesizedType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSParenthesizedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeOperator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeOperator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIndexedAccessType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSMappedType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSMappedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSLiteralType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSLiteralType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExpressionWithTypeArguments(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExpressionWithTypeArguments\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInterfaceBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInterfaceBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAliasDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAliasDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSAsExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSAsExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAssertion(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAssertion\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEnumDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEnumMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEnumMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSModuleDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSModuleDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSModuleBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSModuleBlock\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSImportType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSImportType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSImportEqualsDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSImportEqualsDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExternalModuleReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExternalModuleReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNonNullExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNonNullExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExportAssignment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExportAssignment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNamespaceExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNamespaceExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameter(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Expression\" || \"ArrayExpression\" === nodeType || \"AssignmentExpression\" === nodeType || \"BinaryExpression\" === nodeType || \"CallExpression\" === nodeType || \"ConditionalExpression\" === nodeType || \"FunctionExpression\" === nodeType || \"Identifier\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"LogicalExpression\" === nodeType || \"MemberExpression\" === nodeType || \"NewExpression\" === nodeType || \"ObjectExpression\" === nodeType || \"SequenceExpression\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"ThisExpression\" === nodeType || \"UnaryExpression\" === nodeType || \"UpdateExpression\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassExpression\" === nodeType || \"MetaProperty\" === nodeType || \"Super\" === nodeType || \"TaggedTemplateExpression\" === nodeType || \"TemplateLiteral\" === nodeType || \"YieldExpression\" === nodeType || \"TypeCastExpression\" === nodeType || \"JSXElement\" === nodeType || \"JSXFragment\" === nodeType || \"AwaitExpression\" === nodeType || \"BindExpression\" === nodeType || \"OptionalMemberExpression\" === nodeType || \"PipelinePrimaryTopicReference\" === nodeType || \"OptionalCallExpression\" === nodeType || \"Import\" === nodeType || \"DoExpression\" === nodeType || \"BigIntLiteral\" === nodeType || \"RecordExpression\" === nodeType || \"TupleExpression\" === nodeType || \"TSAsExpression\" === nodeType || \"TSTypeAssertion\" === nodeType || \"TSNonNullExpression\" === nodeType || nodeType === \"Placeholder\" && (\"Expression\" === node.expectedNode || \"Identifier\" === node.expectedNode || \"StringLiteral\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBinary(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Binary\" || \"BinaryExpression\" === nodeType || \"LogicalExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isScopable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Scopable\" || \"BlockStatement\" === nodeType || \"CatchClause\" === nodeType || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Program\" === nodeType || \"ObjectMethod\" === nodeType || \"SwitchStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType || \"ForOfStatement\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlockParent(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BlockParent\" || \"BlockStatement\" === nodeType || \"CatchClause\" === nodeType || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Program\" === nodeType || \"ObjectMethod\" === nodeType || \"SwitchStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ForOfStatement\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Block\" || \"BlockStatement\" === nodeType || \"Program\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Statement\" || \"BlockStatement\" === nodeType || \"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"DebuggerStatement\" === nodeType || \"DoWhileStatement\" === nodeType || \"EmptyStatement\" === nodeType || \"ExpressionStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"IfStatement\" === nodeType || \"LabeledStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"SwitchStatement\" === nodeType || \"ThrowStatement\" === nodeType || \"TryStatement\" === nodeType || \"VariableDeclaration\" === nodeType || \"WhileStatement\" === nodeType || \"WithStatement\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ForOfStatement\" === nodeType || \"ImportDeclaration\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType || \"EnumDeclaration\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSModuleDeclaration\" === nodeType || \"TSImportEqualsDeclaration\" === nodeType || \"TSExportAssignment\" === nodeType || \"TSNamespaceExportDeclaration\" === nodeType || nodeType === \"Placeholder\" && (\"Statement\" === node.expectedNode || \"Declaration\" === node.expectedNode || \"BlockStatement\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTerminatorless(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Terminatorless\" || \"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"ThrowStatement\" === nodeType || \"YieldExpression\" === nodeType || \"AwaitExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCompletionStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CompletionStatement\" || \"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"ThrowStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isConditional(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Conditional\" || \"ConditionalExpression\" === nodeType || \"IfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLoop(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Loop\" || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWhile(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"While\" || \"DoWhileStatement\" === nodeType || \"WhileStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpressionWrapper(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExpressionWrapper\" || \"ExpressionStatement\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"TypeCastExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFor(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"For\" || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForXStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForXStatement\" || \"ForInStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Function\" || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionParent(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionParent\" || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPureish(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Pureish\" || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"BigIntLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Declaration\" || \"FunctionDeclaration\" === nodeType || \"VariableDeclaration\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ImportDeclaration\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType || \"EnumDeclaration\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSModuleDeclaration\" === nodeType || nodeType === \"Placeholder\" && \"Declaration\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPatternLike(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PatternLike\" || \"Identifier\" === nodeType || \"RestElement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || nodeType === \"Placeholder\" && (\"Pattern\" === node.expectedNode || \"Identifier\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLVal(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LVal\" || \"Identifier\" === nodeType || \"MemberExpression\" === nodeType || \"RestElement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || \"TSParameterProperty\" === nodeType || nodeType === \"Placeholder\" && (\"Pattern\" === node.expectedNode || \"Identifier\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEntityName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEntityName\" || \"Identifier\" === nodeType || \"TSQualifiedName\" === nodeType || nodeType === \"Placeholder\" && \"Identifier\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Literal\" || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"TemplateLiteral\" === nodeType || \"BigIntLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImmutable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Immutable\" || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"JSXAttribute\" === nodeType || \"JSXClosingElement\" === nodeType || \"JSXElement\" === nodeType || \"JSXExpressionContainer\" === nodeType || \"JSXSpreadChild\" === nodeType || \"JSXOpeningElement\" === nodeType || \"JSXText\" === nodeType || \"JSXFragment\" === nodeType || \"JSXOpeningFragment\" === nodeType || \"JSXClosingFragment\" === nodeType || \"BigIntLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUserWhitespacable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UserWhitespacable\" || \"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType || \"ObjectTypeInternalSlot\" === nodeType || \"ObjectTypeCallProperty\" === nodeType || \"ObjectTypeIndexer\" === nodeType || \"ObjectTypeProperty\" === nodeType || \"ObjectTypeSpreadProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Method\" || \"ObjectMethod\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectMember\" || \"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Property\" || \"ObjectProperty\" === nodeType || \"ClassProperty\" === nodeType || \"ClassPrivateProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnaryLike(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnaryLike\" || \"UnaryExpression\" === nodeType || \"SpreadElement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Pattern\" || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || nodeType === \"Placeholder\" && \"Pattern\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClass(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Class\" || \"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ModuleDeclaration\" || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ImportDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDeclaration\" || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ModuleSpecifier\" || \"ExportSpecifier\" === nodeType || \"ImportDefaultSpecifier\" === nodeType || \"ImportNamespaceSpecifier\" === nodeType || \"ImportSpecifier\" === nodeType || \"ExportDefaultSpecifier\" === nodeType || \"ExportNamespaceSpecifier\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlow(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Flow\" || \"AnyTypeAnnotation\" === nodeType || \"ArrayTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"BooleanLiteralTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"ClassImplements\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"DeclaredPredicate\" === nodeType || \"ExistsTypeAnnotation\" === nodeType || \"FunctionTypeAnnotation\" === nodeType || \"FunctionTypeParam\" === nodeType || \"GenericTypeAnnotation\" === nodeType || \"InferredPredicate\" === nodeType || \"InterfaceExtends\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"InterfaceTypeAnnotation\" === nodeType || \"IntersectionTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NullableTypeAnnotation\" === nodeType || \"NumberLiteralTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"ObjectTypeAnnotation\" === nodeType || \"ObjectTypeInternalSlot\" === nodeType || \"ObjectTypeCallProperty\" === nodeType || \"ObjectTypeIndexer\" === nodeType || \"ObjectTypeProperty\" === nodeType || \"ObjectTypeSpreadProperty\" === nodeType || \"OpaqueType\" === nodeType || \"QualifiedTypeIdentifier\" === nodeType || \"StringLiteralTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"TupleTypeAnnotation\" === nodeType || \"TypeofTypeAnnotation\" === nodeType || \"TypeAlias\" === nodeType || \"TypeAnnotation\" === nodeType || \"TypeCastExpression\" === nodeType || \"TypeParameter\" === nodeType || \"TypeParameterDeclaration\" === nodeType || \"TypeParameterInstantiation\" === nodeType || \"UnionTypeAnnotation\" === nodeType || \"Variance\" === nodeType || \"VoidTypeAnnotation\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FlowType\" || \"AnyTypeAnnotation\" === nodeType || \"ArrayTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"BooleanLiteralTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"ExistsTypeAnnotation\" === nodeType || \"FunctionTypeAnnotation\" === nodeType || \"GenericTypeAnnotation\" === nodeType || \"InterfaceTypeAnnotation\" === nodeType || \"IntersectionTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NullableTypeAnnotation\" === nodeType || \"NumberLiteralTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"ObjectTypeAnnotation\" === nodeType || \"StringLiteralTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"TupleTypeAnnotation\" === nodeType || \"TypeofTypeAnnotation\" === nodeType || \"UnionTypeAnnotation\" === nodeType || \"VoidTypeAnnotation\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowBaseAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FlowBaseAnnotation\" || \"AnyTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"VoidTypeAnnotation\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FlowDeclaration\" || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FlowPredicate\" || \"DeclaredPredicate\" === nodeType || \"InferredPredicate\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBody\" || \"EnumBooleanBody\" === nodeType || \"EnumNumberBody\" === nodeType || \"EnumStringBody\" === nodeType || \"EnumSymbolBody\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumMember\" || \"EnumBooleanMember\" === nodeType || \"EnumNumberMember\" === nodeType || \"EnumStringMember\" === nodeType || \"EnumDefaultedMember\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSX(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSX\" || \"JSXAttribute\" === nodeType || \"JSXClosingElement\" === nodeType || \"JSXElement\" === nodeType || \"JSXEmptyExpression\" === nodeType || \"JSXExpressionContainer\" === nodeType || \"JSXSpreadChild\" === nodeType || \"JSXIdentifier\" === nodeType || \"JSXMemberExpression\" === nodeType || \"JSXNamespacedName\" === nodeType || \"JSXOpeningElement\" === nodeType || \"JSXSpreadAttribute\" === nodeType || \"JSXText\" === nodeType || \"JSXFragment\" === nodeType || \"JSXOpeningFragment\" === nodeType || \"JSXClosingFragment\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPrivate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Private\" || \"ClassPrivateProperty\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"PrivateName\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeElement\" || \"TSCallSignatureDeclaration\" === nodeType || \"TSConstructSignatureDeclaration\" === nodeType || \"TSPropertySignature\" === nodeType || \"TSMethodSignature\" === nodeType || \"TSIndexSignature\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSType\" || \"TSAnyKeyword\" === nodeType || \"TSBooleanKeyword\" === nodeType || \"TSBigIntKeyword\" === nodeType || \"TSNeverKeyword\" === nodeType || \"TSNullKeyword\" === nodeType || \"TSNumberKeyword\" === nodeType || \"TSObjectKeyword\" === nodeType || \"TSStringKeyword\" === nodeType || \"TSSymbolKeyword\" === nodeType || \"TSUndefinedKeyword\" === nodeType || \"TSUnknownKeyword\" === nodeType || \"TSVoidKeyword\" === nodeType || \"TSThisType\" === nodeType || \"TSFunctionType\" === nodeType || \"TSConstructorType\" === nodeType || \"TSTypeReference\" === nodeType || \"TSTypePredicate\" === nodeType || \"TSTypeQuery\" === nodeType || \"TSTypeLiteral\" === nodeType || \"TSArrayType\" === nodeType || \"TSTupleType\" === nodeType || \"TSOptionalType\" === nodeType || \"TSRestType\" === nodeType || \"TSUnionType\" === nodeType || \"TSIntersectionType\" === nodeType || \"TSConditionalType\" === nodeType || \"TSInferType\" === nodeType || \"TSParenthesizedType\" === nodeType || \"TSTypeOperator\" === nodeType || \"TSIndexedAccessType\" === nodeType || \"TSMappedType\" === nodeType || \"TSLiteralType\" === nodeType || \"TSExpressionWithTypeArguments\" === nodeType || \"TSImportType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberLiteral(node, opts) {\n  console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRegexLiteral(node, opts) {\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RegexLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRestProperty(node, opts) {\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RestProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSpreadProperty(node, opts) {\n  console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/workspace/covexit/frontend/node_modules/@babel/types/lib/validators/generated/index.js"],"names":["Object","defineProperty","exports","value","isArrayExpression","isAssignmentExpression","isBinaryExpression","isInterpreterDirective","isDirective","isDirectiveLiteral","isBlockStatement","isBreakStatement","isCallExpression","isCatchClause","isConditionalExpression","isContinueStatement","isDebuggerStatement","isDoWhileStatement","isEmptyStatement","isExpressionStatement","isFile","isForInStatement","isForStatement","isFunctionDeclaration","isFunctionExpression","isIdentifier","isIfStatement","isLabeledStatement","isStringLiteral","isNumericLiteral","isNullLiteral","isBooleanLiteral","isRegExpLiteral","isLogicalExpression","isMemberExpression","isNewExpression","isProgram","isObjectExpression","isObjectMethod","isObjectProperty","isRestElement","isReturnStatement","isSequenceExpression","isParenthesizedExpression","isSwitchCase","isSwitchStatement","isThisExpression","isThrowStatement","isTryStatement","isUnaryExpression","isUpdateExpression","isVariableDeclaration","isVariableDeclarator","isWhileStatement","isWithStatement","isAssignmentPattern","isArrayPattern","isArrowFunctionExpression","isClassBody","isClassExpression","isClassDeclaration","isExportAllDeclaration","isExportDefaultDeclaration","isExportNamedDeclaration","isExportSpecifier","isForOfStatement","isImportDeclaration","isImportDefaultSpecifier","isImportNamespaceSpecifier","isImportSpecifier","isMetaProperty","isClassMethod","isObjectPattern","isSpreadElement","isSuper","isTaggedTemplateExpression","isTemplateElement","isTemplateLiteral","isYieldExpression","isAnyTypeAnnotation","isArrayTypeAnnotation","isBooleanTypeAnnotation","isBooleanLiteralTypeAnnotation","isNullLiteralTypeAnnotation","isClassImplements","isDeclareClass","isDeclareFunction","isDeclareInterface","isDeclareModule","isDeclareModuleExports","isDeclareTypeAlias","isDeclareOpaqueType","isDeclareVariable","isDeclareExportDeclaration","isDeclareExportAllDeclaration","isDeclaredPredicate","isExistsTypeAnnotation","isFunctionTypeAnnotation","isFunctionTypeParam","isGenericTypeAnnotation","isInferredPredicate","isInterfaceExtends","isInterfaceDeclaration","isInterfaceTypeAnnotation","isIntersectionTypeAnnotation","isMixedTypeAnnotation","isEmptyTypeAnnotation","isNullableTypeAnnotation","isNumberLiteralTypeAnnotation","isNumberTypeAnnotation","isObjectTypeAnnotation","isObjectTypeInternalSlot","isObjectTypeCallProperty","isObjectTypeIndexer","isObjectTypeProperty","isObjectTypeSpreadProperty","isOpaqueType","isQualifiedTypeIdentifier","isStringLiteralTypeAnnotation","isStringTypeAnnotation","isSymbolTypeAnnotation","isThisTypeAnnotation","isTupleTypeAnnotation","isTypeofTypeAnnotation","isTypeAlias","isTypeAnnotation","isTypeCastExpression","isTypeParameter","isTypeParameterDeclaration","isTypeParameterInstantiation","isUnionTypeAnnotation","isVariance","isVoidTypeAnnotation","isEnumDeclaration","isEnumBooleanBody","isEnumNumberBody","isEnumStringBody","isEnumSymbolBody","isEnumBooleanMember","isEnumNumberMember","isEnumStringMember","isEnumDefaultedMember","isJSXAttribute","isJSXClosingElement","isJSXElement","isJSXEmptyExpression","isJSXExpressionContainer","isJSXSpreadChild","isJSXIdentifier","isJSXMemberExpression","isJSXNamespacedName","isJSXOpeningElement","isJSXSpreadAttribute","isJSXText","isJSXFragment","isJSXOpeningFragment","isJSXClosingFragment","isNoop","isPlaceholder","isV8IntrinsicIdentifier","isArgumentPlaceholder","isAwaitExpression","isBindExpression","isClassProperty","isOptionalMemberExpression","isPipelineTopicExpression","isPipelineBareFunction","isPipelinePrimaryTopicReference","isOptionalCallExpression","isClassPrivateProperty","isClassPrivateMethod","isImport","isDecorator","isDoExpression","isExportDefaultSpecifier","isExportNamespaceSpecifier","isPrivateName","isBigIntLiteral","isRecordExpression","isTupleExpression","isTSParameterProperty","isTSDeclareFunction","isTSDeclareMethod","isTSQualifiedName","isTSCallSignatureDeclaration","isTSConstructSignatureDeclaration","isTSPropertySignature","isTSMethodSignature","isTSIndexSignature","isTSAnyKeyword","isTSBooleanKeyword","isTSBigIntKeyword","isTSNeverKeyword","isTSNullKeyword","isTSNumberKeyword","isTSObjectKeyword","isTSStringKeyword","isTSSymbolKeyword","isTSUndefinedKeyword","isTSUnknownKeyword","isTSVoidKeyword","isTSThisType","isTSFunctionType","isTSConstructorType","isTSTypeReference","isTSTypePredicate","isTSTypeQuery","isTSTypeLiteral","isTSArrayType","isTSTupleType","isTSOptionalType","isTSRestType","isTSUnionType","isTSIntersectionType","isTSConditionalType","isTSInferType","isTSParenthesizedType","isTSTypeOperator","isTSIndexedAccessType","isTSMappedType","isTSLiteralType","isTSExpressionWithTypeArguments","isTSInterfaceDeclaration","isTSInterfaceBody","isTSTypeAliasDeclaration","isTSAsExpression","isTSTypeAssertion","isTSEnumDeclaration","isTSEnumMember","isTSModuleDeclaration","isTSModuleBlock","isTSImportType","isTSImportEqualsDeclaration","isTSExternalModuleReference","isTSNonNullExpression","isTSExportAssignment","isTSNamespaceExportDeclaration","isTSTypeAnnotation","isTSTypeParameterInstantiation","isTSTypeParameterDeclaration","isTSTypeParameter","isExpression","isBinary","isScopable","isBlockParent","isBlock","isStatement","isTerminatorless","isCompletionStatement","isConditional","isLoop","isWhile","isExpressionWrapper","isFor","isForXStatement","isFunction","isFunctionParent","isPureish","isDeclaration","isPatternLike","isLVal","isTSEntityName","isLiteral","isImmutable","isUserWhitespacable","isMethod","isObjectMember","isProperty","isUnaryLike","isPattern","isClass","isModuleDeclaration","isExportDeclaration","isModuleSpecifier","isFlow","isFlowType","isFlowBaseAnnotation","isFlowDeclaration","isFlowPredicate","isEnumBody","isEnumMember","isJSX","isPrivate","isTSTypeElement","isTSType","isNumberLiteral","isRegexLiteral","isRestProperty","isSpreadProperty","_shallowEqual","_interopRequireDefault","require","obj","__esModule","default","node","opts","nodeType","type","expectedNode","console","trace"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isArrayExpression = isArrayExpression;\nexports.isAssignmentExpression = isAssignmentExpression;\nexports.isBinaryExpression = isBinaryExpression;\nexports.isInterpreterDirective = isInterpreterDirective;\nexports.isDirective = isDirective;\nexports.isDirectiveLiteral = isDirectiveLiteral;\nexports.isBlockStatement = isBlockStatement;\nexports.isBreakStatement = isBreakStatement;\nexports.isCallExpression = isCallExpression;\nexports.isCatchClause = isCatchClause;\nexports.isConditionalExpression = isConditionalExpression;\nexports.isContinueStatement = isContinueStatement;\nexports.isDebuggerStatement = isDebuggerStatement;\nexports.isDoWhileStatement = isDoWhileStatement;\nexports.isEmptyStatement = isEmptyStatement;\nexports.isExpressionStatement = isExpressionStatement;\nexports.isFile = isFile;\nexports.isForInStatement = isForInStatement;\nexports.isForStatement = isForStatement;\nexports.isFunctionDeclaration = isFunctionDeclaration;\nexports.isFunctionExpression = isFunctionExpression;\nexports.isIdentifier = isIdentifier;\nexports.isIfStatement = isIfStatement;\nexports.isLabeledStatement = isLabeledStatement;\nexports.isStringLiteral = isStringLiteral;\nexports.isNumericLiteral = isNumericLiteral;\nexports.isNullLiteral = isNullLiteral;\nexports.isBooleanLiteral = isBooleanLiteral;\nexports.isRegExpLiteral = isRegExpLiteral;\nexports.isLogicalExpression = isLogicalExpression;\nexports.isMemberExpression = isMemberExpression;\nexports.isNewExpression = isNewExpression;\nexports.isProgram = isProgram;\nexports.isObjectExpression = isObjectExpression;\nexports.isObjectMethod = isObjectMethod;\nexports.isObjectProperty = isObjectProperty;\nexports.isRestElement = isRestElement;\nexports.isReturnStatement = isReturnStatement;\nexports.isSequenceExpression = isSequenceExpression;\nexports.isParenthesizedExpression = isParenthesizedExpression;\nexports.isSwitchCase = isSwitchCase;\nexports.isSwitchStatement = isSwitchStatement;\nexports.isThisExpression = isThisExpression;\nexports.isThrowStatement = isThrowStatement;\nexports.isTryStatement = isTryStatement;\nexports.isUnaryExpression = isUnaryExpression;\nexports.isUpdateExpression = isUpdateExpression;\nexports.isVariableDeclaration = isVariableDeclaration;\nexports.isVariableDeclarator = isVariableDeclarator;\nexports.isWhileStatement = isWhileStatement;\nexports.isWithStatement = isWithStatement;\nexports.isAssignmentPattern = isAssignmentPattern;\nexports.isArrayPattern = isArrayPattern;\nexports.isArrowFunctionExpression = isArrowFunctionExpression;\nexports.isClassBody = isClassBody;\nexports.isClassExpression = isClassExpression;\nexports.isClassDeclaration = isClassDeclaration;\nexports.isExportAllDeclaration = isExportAllDeclaration;\nexports.isExportDefaultDeclaration = isExportDefaultDeclaration;\nexports.isExportNamedDeclaration = isExportNamedDeclaration;\nexports.isExportSpecifier = isExportSpecifier;\nexports.isForOfStatement = isForOfStatement;\nexports.isImportDeclaration = isImportDeclaration;\nexports.isImportDefaultSpecifier = isImportDefaultSpecifier;\nexports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;\nexports.isImportSpecifier = isImportSpecifier;\nexports.isMetaProperty = isMetaProperty;\nexports.isClassMethod = isClassMethod;\nexports.isObjectPattern = isObjectPattern;\nexports.isSpreadElement = isSpreadElement;\nexports.isSuper = isSuper;\nexports.isTaggedTemplateExpression = isTaggedTemplateExpression;\nexports.isTemplateElement = isTemplateElement;\nexports.isTemplateLiteral = isTemplateLiteral;\nexports.isYieldExpression = isYieldExpression;\nexports.isAnyTypeAnnotation = isAnyTypeAnnotation;\nexports.isArrayTypeAnnotation = isArrayTypeAnnotation;\nexports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;\nexports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;\nexports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;\nexports.isClassImplements = isClassImplements;\nexports.isDeclareClass = isDeclareClass;\nexports.isDeclareFunction = isDeclareFunction;\nexports.isDeclareInterface = isDeclareInterface;\nexports.isDeclareModule = isDeclareModule;\nexports.isDeclareModuleExports = isDeclareModuleExports;\nexports.isDeclareTypeAlias = isDeclareTypeAlias;\nexports.isDeclareOpaqueType = isDeclareOpaqueType;\nexports.isDeclareVariable = isDeclareVariable;\nexports.isDeclareExportDeclaration = isDeclareExportDeclaration;\nexports.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;\nexports.isDeclaredPredicate = isDeclaredPredicate;\nexports.isExistsTypeAnnotation = isExistsTypeAnnotation;\nexports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;\nexports.isFunctionTypeParam = isFunctionTypeParam;\nexports.isGenericTypeAnnotation = isGenericTypeAnnotation;\nexports.isInferredPredicate = isInferredPredicate;\nexports.isInterfaceExtends = isInterfaceExtends;\nexports.isInterfaceDeclaration = isInterfaceDeclaration;\nexports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;\nexports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;\nexports.isMixedTypeAnnotation = isMixedTypeAnnotation;\nexports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;\nexports.isNullableTypeAnnotation = isNullableTypeAnnotation;\nexports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;\nexports.isNumberTypeAnnotation = isNumberTypeAnnotation;\nexports.isObjectTypeAnnotation = isObjectTypeAnnotation;\nexports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;\nexports.isObjectTypeCallProperty = isObjectTypeCallProperty;\nexports.isObjectTypeIndexer = isObjectTypeIndexer;\nexports.isObjectTypeProperty = isObjectTypeProperty;\nexports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;\nexports.isOpaqueType = isOpaqueType;\nexports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;\nexports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;\nexports.isStringTypeAnnotation = isStringTypeAnnotation;\nexports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;\nexports.isThisTypeAnnotation = isThisTypeAnnotation;\nexports.isTupleTypeAnnotation = isTupleTypeAnnotation;\nexports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;\nexports.isTypeAlias = isTypeAlias;\nexports.isTypeAnnotation = isTypeAnnotation;\nexports.isTypeCastExpression = isTypeCastExpression;\nexports.isTypeParameter = isTypeParameter;\nexports.isTypeParameterDeclaration = isTypeParameterDeclaration;\nexports.isTypeParameterInstantiation = isTypeParameterInstantiation;\nexports.isUnionTypeAnnotation = isUnionTypeAnnotation;\nexports.isVariance = isVariance;\nexports.isVoidTypeAnnotation = isVoidTypeAnnotation;\nexports.isEnumDeclaration = isEnumDeclaration;\nexports.isEnumBooleanBody = isEnumBooleanBody;\nexports.isEnumNumberBody = isEnumNumberBody;\nexports.isEnumStringBody = isEnumStringBody;\nexports.isEnumSymbolBody = isEnumSymbolBody;\nexports.isEnumBooleanMember = isEnumBooleanMember;\nexports.isEnumNumberMember = isEnumNumberMember;\nexports.isEnumStringMember = isEnumStringMember;\nexports.isEnumDefaultedMember = isEnumDefaultedMember;\nexports.isJSXAttribute = isJSXAttribute;\nexports.isJSXClosingElement = isJSXClosingElement;\nexports.isJSXElement = isJSXElement;\nexports.isJSXEmptyExpression = isJSXEmptyExpression;\nexports.isJSXExpressionContainer = isJSXExpressionContainer;\nexports.isJSXSpreadChild = isJSXSpreadChild;\nexports.isJSXIdentifier = isJSXIdentifier;\nexports.isJSXMemberExpression = isJSXMemberExpression;\nexports.isJSXNamespacedName = isJSXNamespacedName;\nexports.isJSXOpeningElement = isJSXOpeningElement;\nexports.isJSXSpreadAttribute = isJSXSpreadAttribute;\nexports.isJSXText = isJSXText;\nexports.isJSXFragment = isJSXFragment;\nexports.isJSXOpeningFragment = isJSXOpeningFragment;\nexports.isJSXClosingFragment = isJSXClosingFragment;\nexports.isNoop = isNoop;\nexports.isPlaceholder = isPlaceholder;\nexports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;\nexports.isArgumentPlaceholder = isArgumentPlaceholder;\nexports.isAwaitExpression = isAwaitExpression;\nexports.isBindExpression = isBindExpression;\nexports.isClassProperty = isClassProperty;\nexports.isOptionalMemberExpression = isOptionalMemberExpression;\nexports.isPipelineTopicExpression = isPipelineTopicExpression;\nexports.isPipelineBareFunction = isPipelineBareFunction;\nexports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;\nexports.isOptionalCallExpression = isOptionalCallExpression;\nexports.isClassPrivateProperty = isClassPrivateProperty;\nexports.isClassPrivateMethod = isClassPrivateMethod;\nexports.isImport = isImport;\nexports.isDecorator = isDecorator;\nexports.isDoExpression = isDoExpression;\nexports.isExportDefaultSpecifier = isExportDefaultSpecifier;\nexports.isExportNamespaceSpecifier = isExportNamespaceSpecifier;\nexports.isPrivateName = isPrivateName;\nexports.isBigIntLiteral = isBigIntLiteral;\nexports.isRecordExpression = isRecordExpression;\nexports.isTupleExpression = isTupleExpression;\nexports.isTSParameterProperty = isTSParameterProperty;\nexports.isTSDeclareFunction = isTSDeclareFunction;\nexports.isTSDeclareMethod = isTSDeclareMethod;\nexports.isTSQualifiedName = isTSQualifiedName;\nexports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;\nexports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;\nexports.isTSPropertySignature = isTSPropertySignature;\nexports.isTSMethodSignature = isTSMethodSignature;\nexports.isTSIndexSignature = isTSIndexSignature;\nexports.isTSAnyKeyword = isTSAnyKeyword;\nexports.isTSBooleanKeyword = isTSBooleanKeyword;\nexports.isTSBigIntKeyword = isTSBigIntKeyword;\nexports.isTSNeverKeyword = isTSNeverKeyword;\nexports.isTSNullKeyword = isTSNullKeyword;\nexports.isTSNumberKeyword = isTSNumberKeyword;\nexports.isTSObjectKeyword = isTSObjectKeyword;\nexports.isTSStringKeyword = isTSStringKeyword;\nexports.isTSSymbolKeyword = isTSSymbolKeyword;\nexports.isTSUndefinedKeyword = isTSUndefinedKeyword;\nexports.isTSUnknownKeyword = isTSUnknownKeyword;\nexports.isTSVoidKeyword = isTSVoidKeyword;\nexports.isTSThisType = isTSThisType;\nexports.isTSFunctionType = isTSFunctionType;\nexports.isTSConstructorType = isTSConstructorType;\nexports.isTSTypeReference = isTSTypeReference;\nexports.isTSTypePredicate = isTSTypePredicate;\nexports.isTSTypeQuery = isTSTypeQuery;\nexports.isTSTypeLiteral = isTSTypeLiteral;\nexports.isTSArrayType = isTSArrayType;\nexports.isTSTupleType = isTSTupleType;\nexports.isTSOptionalType = isTSOptionalType;\nexports.isTSRestType = isTSRestType;\nexports.isTSUnionType = isTSUnionType;\nexports.isTSIntersectionType = isTSIntersectionType;\nexports.isTSConditionalType = isTSConditionalType;\nexports.isTSInferType = isTSInferType;\nexports.isTSParenthesizedType = isTSParenthesizedType;\nexports.isTSTypeOperator = isTSTypeOperator;\nexports.isTSIndexedAccessType = isTSIndexedAccessType;\nexports.isTSMappedType = isTSMappedType;\nexports.isTSLiteralType = isTSLiteralType;\nexports.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;\nexports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;\nexports.isTSInterfaceBody = isTSInterfaceBody;\nexports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;\nexports.isTSAsExpression = isTSAsExpression;\nexports.isTSTypeAssertion = isTSTypeAssertion;\nexports.isTSEnumDeclaration = isTSEnumDeclaration;\nexports.isTSEnumMember = isTSEnumMember;\nexports.isTSModuleDeclaration = isTSModuleDeclaration;\nexports.isTSModuleBlock = isTSModuleBlock;\nexports.isTSImportType = isTSImportType;\nexports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;\nexports.isTSExternalModuleReference = isTSExternalModuleReference;\nexports.isTSNonNullExpression = isTSNonNullExpression;\nexports.isTSExportAssignment = isTSExportAssignment;\nexports.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;\nexports.isTSTypeAnnotation = isTSTypeAnnotation;\nexports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;\nexports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;\nexports.isTSTypeParameter = isTSTypeParameter;\nexports.isExpression = isExpression;\nexports.isBinary = isBinary;\nexports.isScopable = isScopable;\nexports.isBlockParent = isBlockParent;\nexports.isBlock = isBlock;\nexports.isStatement = isStatement;\nexports.isTerminatorless = isTerminatorless;\nexports.isCompletionStatement = isCompletionStatement;\nexports.isConditional = isConditional;\nexports.isLoop = isLoop;\nexports.isWhile = isWhile;\nexports.isExpressionWrapper = isExpressionWrapper;\nexports.isFor = isFor;\nexports.isForXStatement = isForXStatement;\nexports.isFunction = isFunction;\nexports.isFunctionParent = isFunctionParent;\nexports.isPureish = isPureish;\nexports.isDeclaration = isDeclaration;\nexports.isPatternLike = isPatternLike;\nexports.isLVal = isLVal;\nexports.isTSEntityName = isTSEntityName;\nexports.isLiteral = isLiteral;\nexports.isImmutable = isImmutable;\nexports.isUserWhitespacable = isUserWhitespacable;\nexports.isMethod = isMethod;\nexports.isObjectMember = isObjectMember;\nexports.isProperty = isProperty;\nexports.isUnaryLike = isUnaryLike;\nexports.isPattern = isPattern;\nexports.isClass = isClass;\nexports.isModuleDeclaration = isModuleDeclaration;\nexports.isExportDeclaration = isExportDeclaration;\nexports.isModuleSpecifier = isModuleSpecifier;\nexports.isFlow = isFlow;\nexports.isFlowType = isFlowType;\nexports.isFlowBaseAnnotation = isFlowBaseAnnotation;\nexports.isFlowDeclaration = isFlowDeclaration;\nexports.isFlowPredicate = isFlowPredicate;\nexports.isEnumBody = isEnumBody;\nexports.isEnumMember = isEnumMember;\nexports.isJSX = isJSX;\nexports.isPrivate = isPrivate;\nexports.isTSTypeElement = isTSTypeElement;\nexports.isTSType = isTSType;\nexports.isNumberLiteral = isNumberLiteral;\nexports.isRegexLiteral = isRegexLiteral;\nexports.isRestProperty = isRestProperty;\nexports.isSpreadProperty = isSpreadProperty;\n\nvar _shallowEqual = _interopRequireDefault(require(\"../../utils/shallowEqual\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isArrayExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAssignmentExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AssignmentExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBinaryExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BinaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterpreterDirective(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterpreterDirective\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDirective(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Directive\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDirectiveLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DirectiveLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlockStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BlockStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBreakStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BreakStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCallExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCatchClause(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CatchClause\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isConditionalExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ConditionalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isContinueStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ContinueStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDebuggerStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DebuggerStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDoWhileStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DoWhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEmptyStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EmptyStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpressionStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExpressionStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFile(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"File\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForInStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForInStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Identifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIfStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLabeledStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LabeledStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumericLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumericLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRegExpLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RegExpLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLogicalExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LogicalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNewExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NewExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isProgram(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Program\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRestElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RestElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isReturnStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ReturnStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSequenceExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SequenceExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isParenthesizedExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ParenthesizedExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSwitchCase(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SwitchCase\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSwitchStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SwitchStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThisExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThisExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThrowStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThrowStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTryStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TryStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnaryExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUpdateExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UpdateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariableDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VariableDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariableDeclarator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VariableDeclarator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWhileStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"WhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWithStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"WithStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAssignmentPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AssignmentPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrayPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrowFunctionExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrowFunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDefaultDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDefaultDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportNamedDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportNamedDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForOfStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForOfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImportSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ImportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMetaProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MetaProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSpreadElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SpreadElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSuper(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Super\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTaggedTemplateExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TaggedTemplateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTemplateElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TemplateElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTemplateLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TemplateLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isYieldExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"YieldExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAnyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AnyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArrayTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArrayTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBooleanLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BooleanLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassImplements(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassImplements\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareClass(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareClass\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareInterface(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareInterface\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareModule(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareModule\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareModuleExports(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareModuleExports\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareTypeAlias(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareTypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareOpaqueType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareOpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareVariable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareVariable\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclareExportAllDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclareExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclaredPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DeclaredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExistsTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExistsTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionTypeParam(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionTypeParam\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isGenericTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"GenericTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInferredPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InferredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceExtends(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceExtends\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isInterfaceTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"InterfaceTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isIntersectionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"IntersectionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMixedTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"MixedTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEmptyTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EmptyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNullableTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NullableTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeInternalSlot(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeInternalSlot\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeCallProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeCallProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeIndexer(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeIndexer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectTypeSpreadProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectTypeSpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOpaqueType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isQualifiedTypeIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"QualifiedTypeIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringLiteralTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStringTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"StringTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSymbolTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SymbolTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isThisTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ThisTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTupleTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TupleTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeofTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeofTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeAlias(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeCastExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeCastExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameter(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnionTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVariance(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Variance\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isVoidTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"VoidTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBooleanBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBooleanBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumNumberBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumNumberBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumStringBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumStringBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumSymbolBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumSymbolBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBooleanMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBooleanMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumNumberMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumNumberMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumStringMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumStringMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumDefaultedMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumDefaultedMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXClosingElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXClosingElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXEmptyExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXEmptyExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXExpressionContainer(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXExpressionContainer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXSpreadChild(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXSpreadChild\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXNamespacedName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXNamespacedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXOpeningElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXOpeningElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXSpreadAttribute(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXSpreadAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXText(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXText\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXOpeningFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXOpeningFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSXClosingFragment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSXClosingFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNoop(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Noop\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPlaceholder(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Placeholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isV8IntrinsicIdentifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"V8IntrinsicIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isArgumentPlaceholder(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ArgumentPlaceholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isAwaitExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"AwaitExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBindExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BindExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalMemberExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelineTopicExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelineTopicExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelineBareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelineBareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPipelinePrimaryTopicReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PipelinePrimaryTopicReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isOptionalCallExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"OptionalCallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassPrivateProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassPrivateProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClassPrivateMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ClassPrivateMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImport(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Import\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDecorator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Decorator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDoExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"DoExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDefaultSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportNamespaceSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPrivateName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PrivateName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBigIntLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BigIntLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRecordExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RecordExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTupleExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TupleExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSParameterProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSParameterProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSDeclareFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSDeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSDeclareMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSDeclareMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSQualifiedName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSQualifiedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSCallSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSCallSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConstructSignatureDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConstructSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSPropertySignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSPropertySignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSMethodSignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSMethodSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIndexSignature(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIndexSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSAnyKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSAnyKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBooleanKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSBooleanKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSBigIntKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSBigIntKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNeverKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNeverKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNullKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNullKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNumberKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNumberKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSObjectKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSObjectKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSStringKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSStringKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSSymbolKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSSymbolKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUndefinedKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUndefinedKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUnknownKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUnknownKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSVoidKeyword(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSVoidKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSThisType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSThisType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSFunctionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSFunctionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConstructorType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConstructorType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypePredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypePredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeQuery(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeQuery\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSArrayType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSArrayType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTupleType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTupleType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSOptionalType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSOptionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSRestType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSRestType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSUnionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSUnionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIntersectionType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIntersectionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSConditionalType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSConditionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInferType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInferType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSParenthesizedType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSParenthesizedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeOperator(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeOperator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSIndexedAccessType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSIndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSMappedType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSMappedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSLiteralType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSLiteralType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExpressionWithTypeArguments(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExpressionWithTypeArguments\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInterfaceDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSInterfaceBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSInterfaceBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAliasDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAliasDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSAsExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSAsExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAssertion(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAssertion\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEnumDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEnumMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEnumMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSModuleDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSModuleDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSModuleBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSModuleBlock\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSImportType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSImportType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSImportEqualsDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSImportEqualsDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExternalModuleReference(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExternalModuleReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNonNullExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNonNullExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSExportAssignment(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSExportAssignment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSNamespaceExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSNamespaceExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameterInstantiation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameterDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeParameter(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpression(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Expression\" || \"ArrayExpression\" === nodeType || \"AssignmentExpression\" === nodeType || \"BinaryExpression\" === nodeType || \"CallExpression\" === nodeType || \"ConditionalExpression\" === nodeType || \"FunctionExpression\" === nodeType || \"Identifier\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"LogicalExpression\" === nodeType || \"MemberExpression\" === nodeType || \"NewExpression\" === nodeType || \"ObjectExpression\" === nodeType || \"SequenceExpression\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"ThisExpression\" === nodeType || \"UnaryExpression\" === nodeType || \"UpdateExpression\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassExpression\" === nodeType || \"MetaProperty\" === nodeType || \"Super\" === nodeType || \"TaggedTemplateExpression\" === nodeType || \"TemplateLiteral\" === nodeType || \"YieldExpression\" === nodeType || \"TypeCastExpression\" === nodeType || \"JSXElement\" === nodeType || \"JSXFragment\" === nodeType || \"AwaitExpression\" === nodeType || \"BindExpression\" === nodeType || \"OptionalMemberExpression\" === nodeType || \"PipelinePrimaryTopicReference\" === nodeType || \"OptionalCallExpression\" === nodeType || \"Import\" === nodeType || \"DoExpression\" === nodeType || \"BigIntLiteral\" === nodeType || \"RecordExpression\" === nodeType || \"TupleExpression\" === nodeType || \"TSAsExpression\" === nodeType || \"TSTypeAssertion\" === nodeType || \"TSNonNullExpression\" === nodeType || nodeType === \"Placeholder\" && (\"Expression\" === node.expectedNode || \"Identifier\" === node.expectedNode || \"StringLiteral\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBinary(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Binary\" || \"BinaryExpression\" === nodeType || \"LogicalExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isScopable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Scopable\" || \"BlockStatement\" === nodeType || \"CatchClause\" === nodeType || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Program\" === nodeType || \"ObjectMethod\" === nodeType || \"SwitchStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType || \"ForOfStatement\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlockParent(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"BlockParent\" || \"BlockStatement\" === nodeType || \"CatchClause\" === nodeType || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"Program\" === nodeType || \"ObjectMethod\" === nodeType || \"SwitchStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ForOfStatement\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isBlock(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Block\" || \"BlockStatement\" === nodeType || \"Program\" === nodeType || \"TSModuleBlock\" === nodeType || nodeType === \"Placeholder\" && \"BlockStatement\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Statement\" || \"BlockStatement\" === nodeType || \"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"DebuggerStatement\" === nodeType || \"DoWhileStatement\" === nodeType || \"EmptyStatement\" === nodeType || \"ExpressionStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"FunctionDeclaration\" === nodeType || \"IfStatement\" === nodeType || \"LabeledStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"SwitchStatement\" === nodeType || \"ThrowStatement\" === nodeType || \"TryStatement\" === nodeType || \"VariableDeclaration\" === nodeType || \"WhileStatement\" === nodeType || \"WithStatement\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ForOfStatement\" === nodeType || \"ImportDeclaration\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType || \"EnumDeclaration\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSModuleDeclaration\" === nodeType || \"TSImportEqualsDeclaration\" === nodeType || \"TSExportAssignment\" === nodeType || \"TSNamespaceExportDeclaration\" === nodeType || nodeType === \"Placeholder\" && (\"Statement\" === node.expectedNode || \"Declaration\" === node.expectedNode || \"BlockStatement\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTerminatorless(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Terminatorless\" || \"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"ThrowStatement\" === nodeType || \"YieldExpression\" === nodeType || \"AwaitExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isCompletionStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"CompletionStatement\" || \"BreakStatement\" === nodeType || \"ContinueStatement\" === nodeType || \"ReturnStatement\" === nodeType || \"ThrowStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isConditional(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Conditional\" || \"ConditionalExpression\" === nodeType || \"IfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLoop(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Loop\" || \"DoWhileStatement\" === nodeType || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"WhileStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isWhile(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"While\" || \"DoWhileStatement\" === nodeType || \"WhileStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExpressionWrapper(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExpressionWrapper\" || \"ExpressionStatement\" === nodeType || \"ParenthesizedExpression\" === nodeType || \"TypeCastExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFor(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"For\" || \"ForInStatement\" === nodeType || \"ForStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isForXStatement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ForXStatement\" || \"ForInStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunction(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Function\" || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFunctionParent(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FunctionParent\" || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"ObjectMethod\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPureish(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Pureish\" || \"FunctionDeclaration\" === nodeType || \"FunctionExpression\" === nodeType || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"ArrowFunctionExpression\" === nodeType || \"BigIntLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Declaration\" || \"FunctionDeclaration\" === nodeType || \"VariableDeclaration\" === nodeType || \"ClassDeclaration\" === nodeType || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ImportDeclaration\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType || \"EnumDeclaration\" === nodeType || \"TSDeclareFunction\" === nodeType || \"TSInterfaceDeclaration\" === nodeType || \"TSTypeAliasDeclaration\" === nodeType || \"TSEnumDeclaration\" === nodeType || \"TSModuleDeclaration\" === nodeType || nodeType === \"Placeholder\" && \"Declaration\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPatternLike(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"PatternLike\" || \"Identifier\" === nodeType || \"RestElement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || nodeType === \"Placeholder\" && (\"Pattern\" === node.expectedNode || \"Identifier\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLVal(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"LVal\" || \"Identifier\" === nodeType || \"MemberExpression\" === nodeType || \"RestElement\" === nodeType || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || \"TSParameterProperty\" === nodeType || nodeType === \"Placeholder\" && (\"Pattern\" === node.expectedNode || \"Identifier\" === node.expectedNode)) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSEntityName(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSEntityName\" || \"Identifier\" === nodeType || \"TSQualifiedName\" === nodeType || nodeType === \"Placeholder\" && \"Identifier\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isLiteral(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Literal\" || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"RegExpLiteral\" === nodeType || \"TemplateLiteral\" === nodeType || \"BigIntLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isImmutable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Immutable\" || \"StringLiteral\" === nodeType || \"NumericLiteral\" === nodeType || \"NullLiteral\" === nodeType || \"BooleanLiteral\" === nodeType || \"JSXAttribute\" === nodeType || \"JSXClosingElement\" === nodeType || \"JSXElement\" === nodeType || \"JSXExpressionContainer\" === nodeType || \"JSXSpreadChild\" === nodeType || \"JSXOpeningElement\" === nodeType || \"JSXText\" === nodeType || \"JSXFragment\" === nodeType || \"JSXOpeningFragment\" === nodeType || \"JSXClosingFragment\" === nodeType || \"BigIntLiteral\" === nodeType || nodeType === \"Placeholder\" && \"StringLiteral\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUserWhitespacable(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UserWhitespacable\" || \"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType || \"ObjectTypeInternalSlot\" === nodeType || \"ObjectTypeCallProperty\" === nodeType || \"ObjectTypeIndexer\" === nodeType || \"ObjectTypeProperty\" === nodeType || \"ObjectTypeSpreadProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isMethod(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Method\" || \"ObjectMethod\" === nodeType || \"ClassMethod\" === nodeType || \"ClassPrivateMethod\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isObjectMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ObjectMember\" || \"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isProperty(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Property\" || \"ObjectProperty\" === nodeType || \"ClassProperty\" === nodeType || \"ClassPrivateProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isUnaryLike(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"UnaryLike\" || \"UnaryExpression\" === nodeType || \"SpreadElement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPattern(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Pattern\" || \"AssignmentPattern\" === nodeType || \"ArrayPattern\" === nodeType || \"ObjectPattern\" === nodeType || nodeType === \"Placeholder\" && \"Pattern\" === node.expectedNode) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isClass(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Class\" || \"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ModuleDeclaration\" || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType || \"ImportDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isExportDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ExportDeclaration\" || \"ExportAllDeclaration\" === nodeType || \"ExportDefaultDeclaration\" === nodeType || \"ExportNamedDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isModuleSpecifier(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"ModuleSpecifier\" || \"ExportSpecifier\" === nodeType || \"ImportDefaultSpecifier\" === nodeType || \"ImportNamespaceSpecifier\" === nodeType || \"ImportSpecifier\" === nodeType || \"ExportDefaultSpecifier\" === nodeType || \"ExportNamespaceSpecifier\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlow(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Flow\" || \"AnyTypeAnnotation\" === nodeType || \"ArrayTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"BooleanLiteralTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"ClassImplements\" === nodeType || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"DeclaredPredicate\" === nodeType || \"ExistsTypeAnnotation\" === nodeType || \"FunctionTypeAnnotation\" === nodeType || \"FunctionTypeParam\" === nodeType || \"GenericTypeAnnotation\" === nodeType || \"InferredPredicate\" === nodeType || \"InterfaceExtends\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"InterfaceTypeAnnotation\" === nodeType || \"IntersectionTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NullableTypeAnnotation\" === nodeType || \"NumberLiteralTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"ObjectTypeAnnotation\" === nodeType || \"ObjectTypeInternalSlot\" === nodeType || \"ObjectTypeCallProperty\" === nodeType || \"ObjectTypeIndexer\" === nodeType || \"ObjectTypeProperty\" === nodeType || \"ObjectTypeSpreadProperty\" === nodeType || \"OpaqueType\" === nodeType || \"QualifiedTypeIdentifier\" === nodeType || \"StringLiteralTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"TupleTypeAnnotation\" === nodeType || \"TypeofTypeAnnotation\" === nodeType || \"TypeAlias\" === nodeType || \"TypeAnnotation\" === nodeType || \"TypeCastExpression\" === nodeType || \"TypeParameter\" === nodeType || \"TypeParameterDeclaration\" === nodeType || \"TypeParameterInstantiation\" === nodeType || \"UnionTypeAnnotation\" === nodeType || \"Variance\" === nodeType || \"VoidTypeAnnotation\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FlowType\" || \"AnyTypeAnnotation\" === nodeType || \"ArrayTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"BooleanLiteralTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"ExistsTypeAnnotation\" === nodeType || \"FunctionTypeAnnotation\" === nodeType || \"GenericTypeAnnotation\" === nodeType || \"InterfaceTypeAnnotation\" === nodeType || \"IntersectionTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NullableTypeAnnotation\" === nodeType || \"NumberLiteralTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"ObjectTypeAnnotation\" === nodeType || \"StringLiteralTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"TupleTypeAnnotation\" === nodeType || \"TypeofTypeAnnotation\" === nodeType || \"UnionTypeAnnotation\" === nodeType || \"VoidTypeAnnotation\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowBaseAnnotation(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FlowBaseAnnotation\" || \"AnyTypeAnnotation\" === nodeType || \"BooleanTypeAnnotation\" === nodeType || \"NullLiteralTypeAnnotation\" === nodeType || \"MixedTypeAnnotation\" === nodeType || \"EmptyTypeAnnotation\" === nodeType || \"NumberTypeAnnotation\" === nodeType || \"StringTypeAnnotation\" === nodeType || \"SymbolTypeAnnotation\" === nodeType || \"ThisTypeAnnotation\" === nodeType || \"VoidTypeAnnotation\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowDeclaration(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FlowDeclaration\" || \"DeclareClass\" === nodeType || \"DeclareFunction\" === nodeType || \"DeclareInterface\" === nodeType || \"DeclareModule\" === nodeType || \"DeclareModuleExports\" === nodeType || \"DeclareTypeAlias\" === nodeType || \"DeclareOpaqueType\" === nodeType || \"DeclareVariable\" === nodeType || \"DeclareExportDeclaration\" === nodeType || \"DeclareExportAllDeclaration\" === nodeType || \"InterfaceDeclaration\" === nodeType || \"OpaqueType\" === nodeType || \"TypeAlias\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isFlowPredicate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"FlowPredicate\" || \"DeclaredPredicate\" === nodeType || \"InferredPredicate\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumBody(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumBody\" || \"EnumBooleanBody\" === nodeType || \"EnumNumberBody\" === nodeType || \"EnumStringBody\" === nodeType || \"EnumSymbolBody\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isEnumMember(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"EnumMember\" || \"EnumBooleanMember\" === nodeType || \"EnumNumberMember\" === nodeType || \"EnumStringMember\" === nodeType || \"EnumDefaultedMember\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isJSX(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"JSX\" || \"JSXAttribute\" === nodeType || \"JSXClosingElement\" === nodeType || \"JSXElement\" === nodeType || \"JSXEmptyExpression\" === nodeType || \"JSXExpressionContainer\" === nodeType || \"JSXSpreadChild\" === nodeType || \"JSXIdentifier\" === nodeType || \"JSXMemberExpression\" === nodeType || \"JSXNamespacedName\" === nodeType || \"JSXOpeningElement\" === nodeType || \"JSXSpreadAttribute\" === nodeType || \"JSXText\" === nodeType || \"JSXFragment\" === nodeType || \"JSXOpeningFragment\" === nodeType || \"JSXClosingFragment\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isPrivate(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"Private\" || \"ClassPrivateProperty\" === nodeType || \"ClassPrivateMethod\" === nodeType || \"PrivateName\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSTypeElement(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSTypeElement\" || \"TSCallSignatureDeclaration\" === nodeType || \"TSConstructSignatureDeclaration\" === nodeType || \"TSPropertySignature\" === nodeType || \"TSMethodSignature\" === nodeType || \"TSIndexSignature\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isTSType(node, opts) {\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"TSType\" || \"TSAnyKeyword\" === nodeType || \"TSBooleanKeyword\" === nodeType || \"TSBigIntKeyword\" === nodeType || \"TSNeverKeyword\" === nodeType || \"TSNullKeyword\" === nodeType || \"TSNumberKeyword\" === nodeType || \"TSObjectKeyword\" === nodeType || \"TSStringKeyword\" === nodeType || \"TSSymbolKeyword\" === nodeType || \"TSUndefinedKeyword\" === nodeType || \"TSUnknownKeyword\" === nodeType || \"TSVoidKeyword\" === nodeType || \"TSThisType\" === nodeType || \"TSFunctionType\" === nodeType || \"TSConstructorType\" === nodeType || \"TSTypeReference\" === nodeType || \"TSTypePredicate\" === nodeType || \"TSTypeQuery\" === nodeType || \"TSTypeLiteral\" === nodeType || \"TSArrayType\" === nodeType || \"TSTupleType\" === nodeType || \"TSOptionalType\" === nodeType || \"TSRestType\" === nodeType || \"TSUnionType\" === nodeType || \"TSIntersectionType\" === nodeType || \"TSConditionalType\" === nodeType || \"TSInferType\" === nodeType || \"TSParenthesizedType\" === nodeType || \"TSTypeOperator\" === nodeType || \"TSIndexedAccessType\" === nodeType || \"TSMappedType\" === nodeType || \"TSLiteralType\" === nodeType || \"TSExpressionWithTypeArguments\" === nodeType || \"TSImportType\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isNumberLiteral(node, opts) {\n  console.trace(\"The node type NumberLiteral has been renamed to NumericLiteral\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"NumberLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRegexLiteral(node, opts) {\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RegexLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isRestProperty(node, opts) {\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"RestProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}\n\nfunction isSpreadProperty(node, opts) {\n  console.trace(\"The node type SpreadProperty has been renamed to SpreadElement\");\n  if (!node) return false;\n  const nodeType = node.type;\n\n  if (nodeType === \"SpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return (0, _shallowEqual.default)(node, opts);\n    }\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"script"}