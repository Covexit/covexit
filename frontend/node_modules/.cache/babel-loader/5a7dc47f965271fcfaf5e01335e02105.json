{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar fails = require('../internals/fails');\n\nvar isArray = require('../internals/is-array');\n\nvar isObject = require('../internals/is-object');\n\nvar toObject = require('../internals/to-object');\n\nvar toLength = require('../internals/to-length');\n\nvar createProperty = require('../internals/create-property');\n\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded'; // We can't use this feature detection in V8 since it causes\n// deoptimization and serious performance degradation\n// https://github.com/zloirock/core-js/issues/679\n\nvar IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\nvar SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n\n$({\n  target: 'Array',\n  proto: true,\n  forced: FORCED\n}, {\n  concat: function concat(arg) {\n    // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n\n    A.length = n;\n    return A;\n  }\n});","map":{"version":3,"sources":["/workspace/covexit/frontend/node_modules/core-js-pure/modules/es.array.concat.js"],"names":["$","require","fails","isArray","isObject","toObject","toLength","createProperty","arraySpeciesCreate","arrayMethodHasSpeciesSupport","wellKnownSymbol","V8_VERSION","IS_CONCAT_SPREADABLE","MAX_SAFE_INTEGER","MAXIMUM_ALLOWED_INDEX_EXCEEDED","IS_CONCAT_SPREADABLE_SUPPORT","array","concat","SPECIES_SUPPORT","isConcatSpreadable","O","spreadable","undefined","FORCED","target","proto","forced","arg","A","n","i","k","length","len","E","arguments","TypeError"],"mappings":"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","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar fails = require('../internals/fails');\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\n// We can't use this feature detection in V8 since it causes\n// deoptimization and serious performance degradation\n// https://github.com/zloirock/core-js/issues/679\nvar IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n// `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  concat: function concat(arg) { // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}