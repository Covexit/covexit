{"ast":null,"code":"var anObject = require('../internals/an-object');\n\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\n\nvar toLength = require('../internals/to-length');\n\nvar bind = require('../internals/function-bind-context');\n\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {\n  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);\n  var iterator, iterFn, index, length, result, next, step;\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators\n\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = AS_ENTRIES ? boundFunction(anObject(step = iterable[index])[0], step[1]) : boundFunction(iterable[index]);\n        if (result && result instanceof Result) return result;\n      }\n\n      return new Result(false);\n    }\n\n    iterator = iterFn.call(iterable);\n  }\n\n  next = iterator.next;\n\n  while (!(step = next.call(iterator)).done) {\n    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);\n    if (typeof result == 'object' && result && result instanceof Result) return result;\n  }\n\n  return new Result(false);\n};\n\niterate.stop = function (result) {\n  return new Result(true, result);\n};","map":{"version":3,"sources":["/workspace/covexit/frontend/node_modules/core-js-pure/internals/iterate.js"],"names":["anObject","require","isArrayIteratorMethod","toLength","bind","getIteratorMethod","callWithSafeIterationClosing","Result","stopped","result","iterate","module","exports","iterable","fn","that","AS_ENTRIES","IS_ITERATOR","boundFunction","iterator","iterFn","index","length","next","step","TypeError","call","done","value","stop"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,uCAAD,CAAnC;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,oCAAD,CAAlB;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,kCAAD,CAA/B;;AACA,IAAIK,4BAA4B,GAAGL,OAAO,CAAC,+CAAD,CAA1C;;AAEA,IAAIM,MAAM,GAAG,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACtC,OAAKD,OAAL,GAAeA,OAAf;AACA,OAAKC,MAAL,GAAcA,MAAd;AACD,CAHD;;AAKA,IAAIC,OAAO,GAAGC,MAAM,CAACC,OAAP,GAAiB,UAAUC,QAAV,EAAoBC,EAApB,EAAwBC,IAAxB,EAA8BC,UAA9B,EAA0CC,WAA1C,EAAuD;AACpF,MAAIC,aAAa,GAAGd,IAAI,CAACU,EAAD,EAAKC,IAAL,EAAWC,UAAU,GAAG,CAAH,GAAO,CAA5B,CAAxB;AACA,MAAIG,QAAJ,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCb,MAArC,EAA6Cc,IAA7C,EAAmDC,IAAnD;;AAEA,MAAIP,WAAJ,EAAiB;AACfE,IAAAA,QAAQ,GAAGN,QAAX;AACD,GAFD,MAEO;AACLO,IAAAA,MAAM,GAAGf,iBAAiB,CAACQ,QAAD,CAA1B;AACA,QAAI,OAAOO,MAAP,IAAiB,UAArB,EAAiC,MAAMK,SAAS,CAAC,wBAAD,CAAf,CAF5B,CAGL;;AACA,QAAIvB,qBAAqB,CAACkB,MAAD,CAAzB,EAAmC;AACjC,WAAKC,KAAK,GAAG,CAAR,EAAWC,MAAM,GAAGnB,QAAQ,CAACU,QAAQ,CAACS,MAAV,CAAjC,EAAoDA,MAAM,GAAGD,KAA7D,EAAoEA,KAAK,EAAzE,EAA6E;AAC3EZ,QAAAA,MAAM,GAAGO,UAAU,GACfE,aAAa,CAAClB,QAAQ,CAACwB,IAAI,GAAGX,QAAQ,CAACQ,KAAD,CAAhB,CAAR,CAAiC,CAAjC,CAAD,EAAsCG,IAAI,CAAC,CAAD,CAA1C,CADE,GAEfN,aAAa,CAACL,QAAQ,CAACQ,KAAD,CAAT,CAFjB;AAGA,YAAIZ,MAAM,IAAIA,MAAM,YAAYF,MAAhC,EAAwC,OAAOE,MAAP;AACzC;;AAAC,aAAO,IAAIF,MAAJ,CAAW,KAAX,CAAP;AACH;;AACDY,IAAAA,QAAQ,GAAGC,MAAM,CAACM,IAAP,CAAYb,QAAZ,CAAX;AACD;;AAEDU,EAAAA,IAAI,GAAGJ,QAAQ,CAACI,IAAhB;;AACA,SAAO,CAAC,CAACC,IAAI,GAAGD,IAAI,CAACG,IAAL,CAAUP,QAAV,CAAR,EAA6BQ,IAArC,EAA2C;AACzClB,IAAAA,MAAM,GAAGH,4BAA4B,CAACa,QAAD,EAAWD,aAAX,EAA0BM,IAAI,CAACI,KAA/B,EAAsCZ,UAAtC,CAArC;AACA,QAAI,OAAOP,MAAP,IAAiB,QAAjB,IAA6BA,MAA7B,IAAuCA,MAAM,YAAYF,MAA7D,EAAqE,OAAOE,MAAP;AACtE;;AAAC,SAAO,IAAIF,MAAJ,CAAW,KAAX,CAAP;AACH,CA1BD;;AA4BAG,OAAO,CAACmB,IAAR,GAAe,UAAUpB,MAAV,EAAkB;AAC/B,SAAO,IAAIF,MAAJ,CAAW,IAAX,EAAiBE,MAAjB,CAAP;AACD,CAFD","sourcesContent":["var anObject = require('../internals/an-object');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar bind = require('../internals/function-bind-context');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {\n  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);\n  var iterator, iterFn, index, length, result, next, step;\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = toLength(iterable.length); length > index; index++) {\n        result = AS_ENTRIES\n          ? boundFunction(anObject(step = iterable[index])[0], step[1])\n          : boundFunction(iterable[index]);\n        if (result && result instanceof Result) return result;\n      } return new Result(false);\n    }\n    iterator = iterFn.call(iterable);\n  }\n\n  next = iterator.next;\n  while (!(step = next.call(iterator)).done) {\n    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);\n    if (typeof result == 'object' && result && result instanceof Result) return result;\n  } return new Result(false);\n};\n\niterate.stop = function (result) {\n  return new Result(true, result);\n};\n"]},"metadata":{},"sourceType":"script"}