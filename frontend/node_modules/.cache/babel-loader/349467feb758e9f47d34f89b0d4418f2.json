{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isNodesEquivalent;\n\nvar _definitions = require(\"../definitions\");\n\nfunction isNodesEquivalent(a, b) {\n  if (typeof a !== \"object\" || typeof b !== \"object\" || a == null || b == null) {\n    return a === b;\n  }\n\n  if (a.type !== b.type) {\n    return false;\n  }\n\n  const fields = Object.keys(_definitions.NODE_FIELDS[a.type] || a.type);\n  const visitorKeys = _definitions.VISITOR_KEYS[a.type];\n\n  for (const field of fields) {\n    if (typeof a[field] !== typeof b[field]) {\n      return false;\n    }\n\n    if (a[field] == null && b[field] == null) {\n      continue;\n    } else if (a[field] == null || b[field] == null) {\n      return false;\n    }\n\n    if (Array.isArray(a[field])) {\n      if (!Array.isArray(b[field])) {\n        return false;\n      }\n\n      if (a[field].length !== b[field].length) {\n        return false;\n      }\n\n      for (let i = 0; i < a[field].length; i++) {\n        if (!isNodesEquivalent(a[field][i], b[field][i])) {\n          return false;\n        }\n      }\n\n      continue;\n    }\n\n    if (typeof a[field] === \"object\" && (!visitorKeys || !visitorKeys.includes(field))) {\n      for (const key of Object.keys(a[field])) {\n        if (a[field][key] !== b[field][key]) {\n          return false;\n        }\n      }\n\n      continue;\n    }\n\n    if (!isNodesEquivalent(a[field], b[field])) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/workspace/covexit/frontend/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"],"names":["Object","defineProperty","exports","value","default","isNodesEquivalent","_definitions","require","a","b","type","fields","keys","NODE_FIELDS","visitorKeys","VISITOR_KEYS","field","Array","isArray","length","i","includes","key"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iBAAlB;;AAEA,IAAIC,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AAEA,SAASF,iBAAT,CAA2BG,CAA3B,EAA8BC,CAA9B,EAAiC;AAC/B,MAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAAtC,IAAkDD,CAAC,IAAI,IAAvD,IAA+DC,CAAC,IAAI,IAAxE,EAA8E;AAC5E,WAAOD,CAAC,KAAKC,CAAb;AACD;;AAED,MAAID,CAAC,CAACE,IAAF,KAAWD,CAAC,CAACC,IAAjB,EAAuB;AACrB,WAAO,KAAP;AACD;;AAED,QAAMC,MAAM,GAAGX,MAAM,CAACY,IAAP,CAAYN,YAAY,CAACO,WAAb,CAAyBL,CAAC,CAACE,IAA3B,KAAoCF,CAAC,CAACE,IAAlD,CAAf;AACA,QAAMI,WAAW,GAAGR,YAAY,CAACS,YAAb,CAA0BP,CAAC,CAACE,IAA5B,CAApB;;AAEA,OAAK,MAAMM,KAAX,IAAoBL,MAApB,EAA4B;AAC1B,QAAI,OAAOH,CAAC,CAACQ,KAAD,CAAR,KAAoB,OAAOP,CAAC,CAACO,KAAD,CAAhC,EAAyC;AACvC,aAAO,KAAP;AACD;;AAED,QAAIR,CAAC,CAACQ,KAAD,CAAD,IAAY,IAAZ,IAAoBP,CAAC,CAACO,KAAD,CAAD,IAAY,IAApC,EAA0C;AACxC;AACD,KAFD,MAEO,IAAIR,CAAC,CAACQ,KAAD,CAAD,IAAY,IAAZ,IAAoBP,CAAC,CAACO,KAAD,CAAD,IAAY,IAApC,EAA0C;AAC/C,aAAO,KAAP;AACD;;AAED,QAAIC,KAAK,CAACC,OAAN,CAAcV,CAAC,CAACQ,KAAD,CAAf,CAAJ,EAA6B;AAC3B,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcT,CAAC,CAACO,KAAD,CAAf,CAAL,EAA8B;AAC5B,eAAO,KAAP;AACD;;AAED,UAAIR,CAAC,CAACQ,KAAD,CAAD,CAASG,MAAT,KAAoBV,CAAC,CAACO,KAAD,CAAD,CAASG,MAAjC,EAAyC;AACvC,eAAO,KAAP;AACD;;AAED,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,CAAC,CAACQ,KAAD,CAAD,CAASG,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACxC,YAAI,CAACf,iBAAiB,CAACG,CAAC,CAACQ,KAAD,CAAD,CAASI,CAAT,CAAD,EAAcX,CAAC,CAACO,KAAD,CAAD,CAASI,CAAT,CAAd,CAAtB,EAAkD;AAChD,iBAAO,KAAP;AACD;AACF;;AAED;AACD;;AAED,QAAI,OAAOZ,CAAC,CAACQ,KAAD,CAAR,KAAoB,QAApB,KAAiC,CAACF,WAAD,IAAgB,CAACA,WAAW,CAACO,QAAZ,CAAqBL,KAArB,CAAlD,CAAJ,EAAoF;AAClF,WAAK,MAAMM,GAAX,IAAkBtB,MAAM,CAACY,IAAP,CAAYJ,CAAC,CAACQ,KAAD,CAAb,CAAlB,EAAyC;AACvC,YAAIR,CAAC,CAACQ,KAAD,CAAD,CAASM,GAAT,MAAkBb,CAAC,CAACO,KAAD,CAAD,CAASM,GAAT,CAAtB,EAAqC;AACnC,iBAAO,KAAP;AACD;AACF;;AAED;AACD;;AAED,QAAI,CAACjB,iBAAiB,CAACG,CAAC,CAACQ,KAAD,CAAF,EAAWP,CAAC,CAACO,KAAD,CAAZ,CAAtB,EAA4C;AAC1C,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isNodesEquivalent;\n\nvar _definitions = require(\"../definitions\");\n\nfunction isNodesEquivalent(a, b) {\n  if (typeof a !== \"object\" || typeof b !== \"object\" || a == null || b == null) {\n    return a === b;\n  }\n\n  if (a.type !== b.type) {\n    return false;\n  }\n\n  const fields = Object.keys(_definitions.NODE_FIELDS[a.type] || a.type);\n  const visitorKeys = _definitions.VISITOR_KEYS[a.type];\n\n  for (const field of fields) {\n    if (typeof a[field] !== typeof b[field]) {\n      return false;\n    }\n\n    if (a[field] == null && b[field] == null) {\n      continue;\n    } else if (a[field] == null || b[field] == null) {\n      return false;\n    }\n\n    if (Array.isArray(a[field])) {\n      if (!Array.isArray(b[field])) {\n        return false;\n      }\n\n      if (a[field].length !== b[field].length) {\n        return false;\n      }\n\n      for (let i = 0; i < a[field].length; i++) {\n        if (!isNodesEquivalent(a[field][i], b[field][i])) {\n          return false;\n        }\n      }\n\n      continue;\n    }\n\n    if (typeof a[field] === \"object\" && (!visitorKeys || !visitorKeys.includes(field))) {\n      for (const key of Object.keys(a[field])) {\n        if (a[field][key] !== b[field][key]) {\n          return false;\n        }\n      }\n\n      continue;\n    }\n\n    if (!isNodesEquivalent(a[field], b[field])) {\n      return false;\n    }\n  }\n\n  return true;\n}"]},"metadata":{},"sourceType":"script"}