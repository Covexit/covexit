{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toKeyAlias;\n\nvar _generated = require(\"../validators/generated\");\n\nvar _cloneNode = _interopRequireDefault(require(\"../clone/cloneNode\"));\n\nvar _removePropertiesDeep = _interopRequireDefault(require(\"../modifications/removePropertiesDeep\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction toKeyAlias(node, key = node.key) {\n  let alias;\n\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if ((0, _generated.isIdentifier)(key)) {\n    alias = key.name;\n  } else if ((0, _generated.isStringLiteral)(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));\n  }\n\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};","map":{"version":3,"sources":["/workspace/covexit/frontend/node_modules/@babel/types/lib/converters/toKeyAlias.js"],"names":["Object","defineProperty","exports","value","default","toKeyAlias","_generated","require","_cloneNode","_interopRequireDefault","_removePropertiesDeep","obj","__esModule","node","key","alias","kind","increment","isIdentifier","name","isStringLiteral","JSON","stringify","computed","static","uid","Number","MAX_SAFE_INTEGER"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,UAAlB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACF,OAAO,CAAC,oBAAD,CAAR,CAAvC;;AAEA,IAAIG,qBAAqB,GAAGD,sBAAsB,CAACF,OAAO,CAAC,uCAAD,CAAR,CAAlD;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEP,IAAAA,OAAO,EAAEO;AAAX,GAArC;AAAwD;;AAE/F,SAASN,UAAT,CAAoBQ,IAApB,EAA0BC,GAAG,GAAGD,IAAI,CAACC,GAArC,EAA0C;AACxC,MAAIC,KAAJ;;AAEA,MAAIF,IAAI,CAACG,IAAL,KAAc,QAAlB,EAA4B;AAC1B,WAAOX,UAAU,CAACY,SAAX,KAAyB,EAAhC;AACD,GAFD,MAEO,IAAI,CAAC,GAAGX,UAAU,CAACY,YAAf,EAA6BJ,GAA7B,CAAJ,EAAuC;AAC5CC,IAAAA,KAAK,GAAGD,GAAG,CAACK,IAAZ;AACD,GAFM,MAEA,IAAI,CAAC,GAAGb,UAAU,CAACc,eAAf,EAAgCN,GAAhC,CAAJ,EAA0C;AAC/CC,IAAAA,KAAK,GAAGM,IAAI,CAACC,SAAL,CAAeR,GAAG,CAACX,KAAnB,CAAR;AACD,GAFM,MAEA;AACLY,IAAAA,KAAK,GAAGM,IAAI,CAACC,SAAL,CAAe,CAAC,GAAGZ,qBAAqB,CAACN,OAA1B,EAAmC,CAAC,GAAGI,UAAU,CAACJ,OAAf,EAAwBU,GAAxB,CAAnC,CAAf,CAAR;AACD;;AAED,MAAID,IAAI,CAACU,QAAT,EAAmB;AACjBR,IAAAA,KAAK,GAAI,IAAGA,KAAM,GAAlB;AACD;;AAED,MAAIF,IAAI,CAACW,MAAT,EAAiB;AACfT,IAAAA,KAAK,GAAI,UAASA,KAAM,EAAxB;AACD;;AAED,SAAOA,KAAP;AACD;;AAEDV,UAAU,CAACoB,GAAX,GAAiB,CAAjB;;AAEApB,UAAU,CAACY,SAAX,GAAuB,YAAY;AACjC,MAAIZ,UAAU,CAACoB,GAAX,IAAkBC,MAAM,CAACC,gBAA7B,EAA+C;AAC7C,WAAOtB,UAAU,CAACoB,GAAX,GAAiB,CAAxB;AACD,GAFD,MAEO;AACL,WAAOpB,UAAU,CAACoB,GAAX,EAAP;AACD;AACF,CAND","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toKeyAlias;\n\nvar _generated = require(\"../validators/generated\");\n\nvar _cloneNode = _interopRequireDefault(require(\"../clone/cloneNode\"));\n\nvar _removePropertiesDeep = _interopRequireDefault(require(\"../modifications/removePropertiesDeep\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toKeyAlias(node, key = node.key) {\n  let alias;\n\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if ((0, _generated.isIdentifier)(key)) {\n    alias = key.name;\n  } else if ((0, _generated.isStringLiteral)(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));\n  }\n\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};"]},"metadata":{},"sourceType":"script"}