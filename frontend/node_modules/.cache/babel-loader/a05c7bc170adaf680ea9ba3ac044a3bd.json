{"ast":null,"code":"'use strict';\n\nvar $forEach = require('../internals/array-iteration').forEach;\n\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('forEach'); // `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n\nmodule.exports = !STRICT_METHOD || !USES_TO_LENGTH ? function forEach(callbackfn\n/* , thisArg */\n) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;","map":{"version":3,"sources":["/workspace/covexit/frontend/node_modules/core-js-pure/internals/array-for-each.js"],"names":["$forEach","require","forEach","arrayMethodIsStrict","arrayMethodUsesToLength","STRICT_METHOD","USES_TO_LENGTH","module","exports","callbackfn","arguments","length","undefined"],"mappings":"AAAA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,8BAAD,CAAP,CAAwCC,OAAvD;;AACA,IAAIC,mBAAmB,GAAGF,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAIG,uBAAuB,GAAGH,OAAO,CAAC,0CAAD,CAArC;;AAEA,IAAII,aAAa,GAAGF,mBAAmB,CAAC,SAAD,CAAvC;AACA,IAAIG,cAAc,GAAGF,uBAAuB,CAAC,SAAD,CAA5C,C,CAEA;AACA;;AACAG,MAAM,CAACC,OAAP,GAAkB,CAACH,aAAD,IAAkB,CAACC,cAApB,GAAsC,SAASJ,OAAT,CAAiBO;AAAW;AAA5B,EAA6C;AAClG,SAAOT,QAAQ,CAAC,IAAD,EAAOS,UAAP,EAAmBC,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAzD,CAAf;AACD,CAFgB,GAEb,GAAGV,OAFP","sourcesContent":["'use strict';\nvar $forEach = require('../internals/array-iteration').forEach;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\nmodule.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n"]},"metadata":{},"sourceType":"script"}