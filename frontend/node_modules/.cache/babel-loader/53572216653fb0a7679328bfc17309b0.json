{"ast":null,"code":"\"use strict\";\n\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\n\nvar _core = require(\"./core\");\n\nvar _es = require(\"./es2015\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nconst bool = (0, _utils.assertValueType)(\"boolean\");\nconst tSFunctionTypeAnnotationCommon = {\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n};\n(0, _utils.default)(\"TSParameterProperty\", {\n  aliases: [\"LVal\"],\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    parameter: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"AssignmentPattern\")\n    }\n  }\n});\n(0, _utils.default)(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.functionDeclarationCommon, {}, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _es.classMethodOrDeclareMethodCommon, {}, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: (0, _utils.validateType)(\"TSEntityName\"),\n    right: (0, _utils.validateType)(\"Identifier\")\n  }\n});\nconst signatureDeclarationCommon = {\n  typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n  parameters: (0, _utils.validateArrayOfType)([\"Identifier\", \"RestElement\"]),\n  typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n};\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\n(0, _utils.default)(\"TSConstructSignatureDeclaration\", callConstructSignatureDeclaration);\nconst namedTypeElementCommon = {\n  key: (0, _utils.validateType)(\"Expression\"),\n  computed: (0, _utils.validate)(bool),\n  optional: (0, _utils.validateOptional)(bool)\n};\n(0, _utils.default)(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: Object.assign({}, namedTypeElementCommon, {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  })\n});\n(0, _utils.default)(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: Object.assign({}, signatureDeclarationCommon, {}, namedTypeElementCommon)\n});\n(0, _utils.default)(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    parameters: (0, _utils.validateArrayOfType)(\"Identifier\"),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n  }\n});\nconst tsKeywordTypes = [\"TSAnyKeyword\", \"TSBooleanKeyword\", \"TSBigIntKeyword\", \"TSNeverKeyword\", \"TSNullKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSUndefinedKeyword\", \"TSUnknownKeyword\", \"TSVoidKeyword\"];\n\nfor (const type of tsKeywordTypes) {\n  (0, _utils.default)(type, {\n    aliases: [\"TSType\"],\n    visitor: [],\n    fields: {}\n  });\n}\n\n(0, _utils.default)(\"TSThisType\", {\n  aliases: [\"TSType\"],\n  visitor: [],\n  fields: {}\n});\nconst fnOrCtr = {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSFunctionType\", fnOrCtr);\n(0, _utils.default)(\"TSConstructorType\", fnOrCtr);\n(0, _utils.default)(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: (0, _utils.validateType)([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    asserts: (0, _utils.validateOptional)(bool)\n  }\n});\n(0, _utils.default)(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\"],\n  fields: {\n    exprName: (0, _utils.validateType)([\"TSEntityName\", \"TSImportType\"])\n  }\n});\n(0, _utils.default)(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n};\n(0, _utils.default)(\"TSUnionType\", unionOrIntersection);\n(0, _utils.default)(\"TSIntersectionType\", unionOrIntersection);\n(0, _utils.default)(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: (0, _utils.validateType)(\"TSType\"),\n    extendsType: (0, _utils.validateType)(\"TSType\"),\n    trueType: (0, _utils.validateType)(\"TSType\"),\n    falseType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\")\n  }\n});\n(0, _utils.default)(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: (0, _utils.validate)((0, _utils.assertValueType)(\"string\")),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"TSType\"),\n    indexType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\"),\n    optional: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSLiteralType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: (0, _utils.validateType)([\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\"])\n  }\n});\n(0, _utils.default)(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\")),\n    body: (0, _utils.validateType)(\"TSInterfaceBody\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSAsExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeAssertion\", {\n  aliases: [\"Expression\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\"),\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    const: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    members: (0, _utils.validateArrayOfType)(\"TSEnumMember\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    global: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    body: (0, _utils.validateType)([\"TSModuleBlock\", \"TSModuleDeclaration\"])\n  }\n});\n(0, _utils.default)(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  }\n});\n(0, _utils.default)(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"StringLiteral\"),\n    qualifier: (0, _utils.validateOptionalType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: (0, _utils.validate)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    moduleReference: (0, _utils.validateType)([\"TSEntityName\", \"TSExternalModuleReference\"])\n  }\n});\n(0, _utils.default)(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"StringLiteral\")\n  }\n});\n(0, _utils.default)(\"TSNonNullExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\n(0, _utils.default)(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TSType\")\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSType\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSTypeParameter\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    constraint: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    },\n    default: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    }\n  }\n});","map":{"version":3,"sources":["/workspace/covexit/frontend/node_modules/@babel/types/lib/definitions/typescript.js"],"names":["_utils","_interopRequireWildcard","require","_core","_es","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","default","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","bool","assertValueType","tSFunctionTypeAnnotationCommon","returnType","validate","assertNodeType","optional","typeParameters","aliases","visitor","fields","accessibility","assertOneOf","readonly","parameter","assign","functionDeclarationCommon","classMethodOrDeclareMethodCommon","left","validateType","right","signatureDeclarationCommon","validateOptionalType","parameters","validateArrayOfType","typeAnnotation","callConstructSignatureDeclaration","namedTypeElementCommon","computed","validateOptional","initializer","tsKeywordTypes","type","fnOrCtr","typeName","builder","parameterName","asserts","exprName","members","elementType","elementTypes","unionOrIntersection","types","checkType","extendsType","trueType","falseType","typeParameter","operator","objectType","indexType","literal","expression","declare","id","extends","arrayOfType","body","const","global","argument","qualifier","isExport","moduleReference","params","chain","assertEach","name","constraint"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\n\nvar _core = require(\"./core\");\n\nvar _es = require(\"./es2015\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst bool = (0, _utils.assertValueType)(\"boolean\");\nconst tSFunctionTypeAnnotationCommon = {\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n};\n(0, _utils.default)(\"TSParameterProperty\", {\n  aliases: [\"LVal\"],\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    parameter: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"AssignmentPattern\")\n    }\n  }\n});\n(0, _utils.default)(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.functionDeclarationCommon, {}, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _es.classMethodOrDeclareMethodCommon, {}, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: (0, _utils.validateType)(\"TSEntityName\"),\n    right: (0, _utils.validateType)(\"Identifier\")\n  }\n});\nconst signatureDeclarationCommon = {\n  typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n  parameters: (0, _utils.validateArrayOfType)([\"Identifier\", \"RestElement\"]),\n  typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n};\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\n(0, _utils.default)(\"TSConstructSignatureDeclaration\", callConstructSignatureDeclaration);\nconst namedTypeElementCommon = {\n  key: (0, _utils.validateType)(\"Expression\"),\n  computed: (0, _utils.validate)(bool),\n  optional: (0, _utils.validateOptional)(bool)\n};\n(0, _utils.default)(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: Object.assign({}, namedTypeElementCommon, {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  })\n});\n(0, _utils.default)(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: Object.assign({}, signatureDeclarationCommon, {}, namedTypeElementCommon)\n});\n(0, _utils.default)(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    parameters: (0, _utils.validateArrayOfType)(\"Identifier\"),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n  }\n});\nconst tsKeywordTypes = [\"TSAnyKeyword\", \"TSBooleanKeyword\", \"TSBigIntKeyword\", \"TSNeverKeyword\", \"TSNullKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSUndefinedKeyword\", \"TSUnknownKeyword\", \"TSVoidKeyword\"];\n\nfor (const type of tsKeywordTypes) {\n  (0, _utils.default)(type, {\n    aliases: [\"TSType\"],\n    visitor: [],\n    fields: {}\n  });\n}\n\n(0, _utils.default)(\"TSThisType\", {\n  aliases: [\"TSType\"],\n  visitor: [],\n  fields: {}\n});\nconst fnOrCtr = {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSFunctionType\", fnOrCtr);\n(0, _utils.default)(\"TSConstructorType\", fnOrCtr);\n(0, _utils.default)(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: (0, _utils.validateType)([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    asserts: (0, _utils.validateOptional)(bool)\n  }\n});\n(0, _utils.default)(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\"],\n  fields: {\n    exprName: (0, _utils.validateType)([\"TSEntityName\", \"TSImportType\"])\n  }\n});\n(0, _utils.default)(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n};\n(0, _utils.default)(\"TSUnionType\", unionOrIntersection);\n(0, _utils.default)(\"TSIntersectionType\", unionOrIntersection);\n(0, _utils.default)(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: (0, _utils.validateType)(\"TSType\"),\n    extendsType: (0, _utils.validateType)(\"TSType\"),\n    trueType: (0, _utils.validateType)(\"TSType\"),\n    falseType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\")\n  }\n});\n(0, _utils.default)(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: (0, _utils.validate)((0, _utils.assertValueType)(\"string\")),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"TSType\"),\n    indexType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\"),\n    optional: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSLiteralType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: (0, _utils.validateType)([\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\"])\n  }\n});\n(0, _utils.default)(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\")),\n    body: (0, _utils.validateType)(\"TSInterfaceBody\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSAsExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeAssertion\", {\n  aliases: [\"Expression\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\"),\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    const: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    members: (0, _utils.validateArrayOfType)(\"TSEnumMember\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    global: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    body: (0, _utils.validateType)([\"TSModuleBlock\", \"TSModuleDeclaration\"])\n  }\n});\n(0, _utils.default)(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  }\n});\n(0, _utils.default)(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"StringLiteral\"),\n    qualifier: (0, _utils.validateOptionalType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: (0, _utils.validate)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    moduleReference: (0, _utils.validateType)([\"TSEntityName\", \"TSExternalModuleReference\"])\n  }\n});\n(0, _utils.default)(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"StringLiteral\")\n  }\n});\n(0, _utils.default)(\"TSNonNullExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\n(0, _utils.default)(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TSType\")\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSType\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSTypeParameter\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    constraint: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    },\n    default: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    }\n  }\n});"]},"metadata":{},"sourceType":"script"}